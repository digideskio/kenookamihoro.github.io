<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>约伊兹的萌狼乡手札</title><link href="https://blog.yoitsu.moe/" rel="alternate"></link><link href="https://blog.yoitsu.moe/feeds/all.atom.xml" rel="self"></link><id>https://blog.yoitsu.moe/</id><updated>2016-03-04T21:00:00+08:00</updated><entry><title>在 Windows 上编织 Pelican 博客 -- MSYS2篇</title><link href="https://blog.yoitsu.moe/tech/pelican_on_windows_msys2.html" rel="alternate"></link><updated>2016-03-04T21:00:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-03-04:tech/pelican_on_windows_msys2.html</id><summary type="html">
&lt;p&gt;用 Windows 那是迫不得已……&lt;/p&gt;

&lt;p&gt;&lt;del&gt;人生赢家&lt;/del&gt; &lt;a class="reference external" href="/links.html#farseerfc"&gt;farseerfc&lt;/a&gt; 这样写到......&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;寄宿在 Github Pages 上的静态博客通常有两种方案，其一是使用 Jekyll 方式撰写，
这可以利用 Github Pages 原本就有的 Jekyll支持 生成静态网站。
另一种是在 本地 也就是自己的电脑上生成好，然后把生成的 HTML 网站 push 到 Github Pages ，
这种情况下 Github Pages 就完全只是一个静态页面宿主环境。&lt;/p&gt;
&lt;p&gt;我用 Pelican 生成博客，当然就只能选择后一种方式了。
这带来一些不便，比如本地配置 pelican 还是有一点点复杂的，所以不能随便找台电脑就开始写博客。
有的时候只是想修正一两个错别字， 这时候必须打开某台特定的电脑才能编辑博客就显得不太方便了。
再比如 pelican 本身虽然是 python 写的所以跨平台，但是具体到博客的配置方面， Windows 环境和 Linux/OSX/Unix-like 环境下还是有 些许出入 的。
还有就是没有像 wordpress 那样的基于 web 的编辑环境，在手机上就不能随便写一篇博客发表出来
（不知道有没有勇士尝试过在 Android 的 SL4A 环境下的 python 中跑 pelican ，还要配合一个 Android 上的 git 客户端 ）。&lt;/p&gt;
&lt;p&gt;---- &lt;a class="reference external" href="https://farseerfc.me/travis-push-to-github-pages-blog.html"&gt;Farseerfc.me:用 Travis-CI 生成 Github Pages 博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;确实,Pelican 虽然是跨平台的,但是......&lt;/p&gt;
&lt;p&gt;如果汝用了 &lt;span class="tag"&gt;pelican-quickstart&lt;/span&gt; ,汝的目录下会有一个 &lt;span class="tag"&gt;Makefile&lt;/span&gt; 文件,那么问题来了,
Windows 里上哪读 Makefile 啦(ノ=Д=)ノ┻━┻&lt;/p&gt;
&lt;p&gt;所以只好在 Windows 里搞个类 &lt;ruby&gt;&lt;rb&gt;Unix&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Linux&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 环境了(´･ω･`)&lt;/p&gt;
&lt;p&gt;&lt;del&gt;某人:其实把 Makefile 魔改成批处理文件也是可以的$#W#@$##%$^&amp;amp;%^%^$^%&amp;amp;%&lt;/del&gt;&lt;/p&gt;
&lt;div class="section" id="msys2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;为啥是msys2?&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="/links.html#quininer"&gt;quininer&lt;/a&gt; :明明是 OneGet + PowerShell 大法好嘛~&lt;/blockquote&gt;
&lt;p&gt;在 Windows 世界里最出名的类 Unix 环境不是 &lt;a class="reference external" href="http://cygwin.com/"&gt;Cygwin&lt;/a&gt; 么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为 msys2 有 pacman 啦~&lt;/p&gt;
&lt;p&gt;因为 msys2 有 pacman 啦 ~ (╯T▽T)╯ ┻━┻&lt;/p&gt;
&lt;p&gt;因为 msys2 有 pacman 啦 ~ (ノ=Д=)ノ┻━┻&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;del&gt;重要的事情说三遍&lt;/del&gt; (๑•̀ㅂ•́)و✧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总之为了 pacman 咱最后选了 msys2 😂😂😂&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;安装和设置 msys2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;去 &lt;a class="reference external" href="http://msys2.github.io/"&gt;官方网站&lt;/a&gt; 或是 &lt;a class="reference external" href="http://mirrors.ustc.edu.cn/msys2/Base/"&gt;崔主席的镜像源&lt;/a&gt; 下载基本组件包啦~ ( &lt;a class="reference external" href="/links.html#cuihao"&gt;cuihao&lt;/a&gt; 好棒~ )&lt;/p&gt;
&lt;p&gt;如果需要, &lt;a class="reference external" href="https://lug.ustc.edu.cn/wiki/mirrors/help/msys2"&gt;把软件仓库换成崔主席的镜像呗~&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来更新msys2和安装基本工具 ( 咱用了 Github 所以再装个 Git ):&lt;/p&gt;
&lt;blockquote&gt;
pacman -Syu
pacman -S base-devel make git&lt;/blockquote&gt;
&lt;div class="tag warning fg-white compound"&gt;
&lt;p class="compound-first"&gt;截至写这篇文章时,咱从pacman安装的 pip ( &lt;span class="tag"&gt;mingw-w64-x86_64-python3-pip&lt;/span&gt; ) 会因为一个 ImportError 没法装任何软件包呐~ ( pia之 (╯＠ω＠)╯ ┻━┻ )&lt;/p&gt;
&lt;p class="compound-last"&gt;所以只好装个 Windows 版的 Python 😂&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican-windows-python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;安装 pelican 和 Windows 版 Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/downloads/windows/"&gt;去 Python.org 下载啦~&lt;/a&gt; ,记得把 &lt;span class="tag"&gt;python&lt;/span&gt; 和 &lt;span class="tag"&gt;pip&lt;/span&gt; 添加到系统的 &lt;span class="tag"&gt;PATH&lt;/span&gt; 中.( msys2 好像可以用 Windows 的 PATH ~)&lt;/p&gt;
&lt;p&gt;接下来打开 msys2 shell (其实就是 Bash 啦 😂) 把 Windows 里的 python 软连接到 &lt;span class="tag"&gt;/usr/bin/python&lt;/span&gt; 上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 不知道在哪? 用 whereis 命令查一下啦~&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;$ whereis python&lt;/span&gt;
&lt;span class="code-line"&gt;/c/python35/python.exe&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 用 ln -s &amp;lt;源路径&amp;gt; &amp;lt;目标路径&amp;gt; 创建一个符号链接.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;$ ln -s /c/python35/python.exe /usr/bin/python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后用 pip 安装 pelican _(:з」∠)_&lt;/p&gt;
&lt;blockquote&gt;
pip install pelican&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;试验&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先用各种不同的方法把汝的 pelican 文件夹复制到 msys2 的主文件夹里啦~ ( 在汝安装 msys2 的文件夹中有一个 &lt;span class="tag"&gt;home/&amp;lt;汝 Windows 系统的用户名&amp;gt;/&lt;/span&gt; 的文件夹啦  (╯°∧°)╯ ┻━┻ )&lt;/p&gt;
&lt;p&gt;如果汝用了 &lt;span class="tag"&gt;pelican-quickstart&lt;/span&gt; 生成了 develop_server.sh 那它喂给 sh 啦~&lt;/p&gt;
&lt;blockquote&gt;
sh develop_server.sh start&lt;/blockquote&gt;
&lt;p&gt;如果没有的话,那就自己 make 呗~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 生成html&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;make html&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 运行测试服务器&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;make serve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有时汝可能用到一些其它程序,那么汝只好通过 pacman 安装或者自己编译啦 (╯‵﹏′)╯ ┻━┻&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这篇文章其实是在 Arch Linux 上完成的所以并没有啥截图😂😂😂&lt;/del&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="blog"></category></entry><entry><title>装完 Arch Linux 再装 Windows 然后修引导~</title><link href="https://blog.yoitsu.moe/tech/windows_grub_recuse.html" rel="alternate"></link><updated>2016-02-22T17:00:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-02-22:tech/windows_grub_recuse.html</id><summary type="html">
&lt;p&gt;装完 Arch Linux 再装 Windows 以后 GRUB 没啦~ Windows 出来背锅 _(:з」∠)_&lt;/p&gt;

&lt;p&gt;&lt;del&gt;要啥 Windows 啊~&lt;/del&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;准备工作&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;一个可启动的 Linux 的 Live USB ( 咱是用的 Arch Linux 的安装 ISO )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好像没啥了诶~(最好要连上网,可以参阅 &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Beginners'_guide"&gt;ArchWiki&lt;/a&gt; 呗~ ).&lt;/p&gt;
&lt;p&gt;如果汝使用 UEFI 主板，且 UEFI 启动模式（优于 BIOS/Legacy 模式）已启用，CD/USB 会自动通过systemd-boot 启动 Arch Linux。要确认是否已进入UEFI模式，检查下面目录是否有文件呗~：&lt;/p&gt;
&lt;blockquote&gt;
# ls /sys/firmware/efi/efivars&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;确定设备名称,然后挂载&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用 &lt;span class="tag"&gt;lsblk&lt;/span&gt; 确定汝 Linux 安装到哪个磁盘里呐~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT&lt;/p&gt;
&lt;p&gt;sda         8:0    0 298.1G  0 disk&lt;/p&gt;
&lt;p&gt;├─sda1    8:1    0    40G  0 part&lt;/p&gt;
&lt;p&gt;├─sda2    8:2    0 256.1G  0 part&lt;/p&gt;
&lt;p&gt;└─sda3    8:3    0     2G  0 part&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咱这个栗子是 &lt;span class="tag"&gt;/dev/sda1&lt;/span&gt; ,MBR 模式的. &lt;span class="tag"&gt;sda1&lt;/span&gt; 是 &lt;span class="tag"&gt;/&lt;/span&gt; ,:code:&lt;cite&gt;sda2&lt;/cite&gt; 是 &lt;span class="tag"&gt;/home&lt;/span&gt; (´･ω･`).&lt;/p&gt;
&lt;p&gt;然后挂载上, archiso 里有个天然的适合的挂载点~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# mount /dev/sda1 /mnt&lt;/p&gt;
&lt;p&gt;# mount /dev/sda2 /mnt/home&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="chrooting"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;chrooting......&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用 &lt;span class="tag"&gt;arch-chroot&lt;/span&gt; chroot 进目标系统:&lt;/p&gt;
&lt;blockquote&gt;
# arch-chroot /mnt /bin/bash&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="mbr-grub"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;MBR  安装 GRUB (´･ω･`)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这样(记得用汝实际的磁盘名称替换 &lt;span class="tag"&gt;sda&lt;/span&gt; ,不要后面的数字.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# grub-install --target=i386-pc --recheck --debug /dev/sda&lt;/p&gt;
&lt;p&gt;# grub-mkconfig -o /boot/grub/grub.cfg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="uefi-grub"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;UEFI 安装 GRUB _(:з」∠)_&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这样(某些系统的 &lt;span class="tag"&gt;--efi-directory&lt;/span&gt; 可能是 :code`/boot/EFI` ,不管啦 (ノ=Д=)ノ┻━┻ )&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck&lt;/p&gt;
&lt;p&gt;# grub-mkconfig -o /boot/grub/grub.cfg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils"/&gt;
&lt;p&gt;最后离开 chroot 环境然后重启,记得拔掉U盘~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# exit&lt;/p&gt;
&lt;p&gt;# reboot&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以嘛,要啥 Windows 呐~ (ノ=Д=)ノ┻━┻&lt;/p&gt;
&lt;/div&gt;
</summary><category term="windows"></category><category term="grub"></category><category term="凑数"></category></entry><entry><title>凤凰卷家的 vps.to 的 OpenVZ VPS 试用小记</title><link href="https://blog.yoitsu.moe/life/vpsto_openvz.html" rel="alternate"></link><updated>2016-02-22T00:00:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-02-22:life/vpsto_openvz.html</id><summary type="html">
&lt;p&gt;论感情牌+吐槽的必要性~（雾&lt;/p&gt;

&lt;p&gt;凤凰卷( &lt;a class="reference external" href="/links.html#phoenixlzx"&gt;phoenixlzx&lt;/a&gt; )家的 &lt;a class="reference external" href="http://vps.to"&gt;vps.to&lt;/a&gt; &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; 最近新上线了 OpenVZ 架构的 VPS .卷说不会超售,咱相信她 (谁叫咱认为她是个好人咧~)&lt;/p&gt;
&lt;table class="footnote docutils table-hover  table-striped table" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;其实和喵窝一样,真正的大 boss 藏在后面~ (逃~&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;因为没人搭理她,她还在 &lt;a class="reference external" href="//webchat.freenode.net/?channels=#archlinux-cn"&gt;##archlinux-cn&lt;/a&gt; 里吐槽了一番:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[phoenixlzx] 没人理会透明卷&lt;/p&gt;
&lt;p&gt;[phoenixlzx] 还是滚去睡觉好了&lt;/p&gt;
&lt;p&gt;(quininer) 凤凰怎么了&lt;/p&gt;
&lt;p&gt;[phoenixlzx] 心情不好&lt;/p&gt;
&lt;p&gt;(quininer) momo&lt;/p&gt;
&lt;p&gt;[phoenixlzx] 当时要做的时候都说做做做做好了买买买&lt;/p&gt;
&lt;p&gt;[phoenixlzx] 然后现在做好了都不吱声了&lt;/p&gt;
&lt;p&gt;[phoenixlzx] 订单呢？订单呢？&lt;/p&gt;
&lt;p&gt;[phoenixlzx] 真是不靠谱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过说到底还是在吐槽 OpenVZ 架构……&lt;/p&gt;
&lt;div class="section" id="openvz"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;说到底还是在吐槽 OpenVZ 架构&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenVZ是基于Linux内核和作业系统的操作系统级虚拟化技术。OpenVZ允许物理服务器运行多个操作系统，被称虚拟专用服务器（VPS，Virtual Private Server）或虚拟环境（VE，Virtual Environment）。&lt;/p&gt;
&lt;p&gt;与VMware这种虚拟机和Xen这种硬件辅助虚拟化技术相比，OpenVZ的主机与客户系统都必须是Linux（虽然在不同的虚拟环境里可以用不同的Linux发行版）。但是，OpenVZ声称这样做有性能上的优势。根据OpenVZ网站的说法，使用OpenVZ与使用独立的实体服务器相比，性能只会有1-3%的损失。&lt;/p&gt;
&lt;p&gt;OpenVZ是SWsoft, Inc.公司开发的专有软件Virtuozzo的基础。OpenVZ的授权为GPLv2。&lt;/p&gt;
&lt;p&gt;OpenVZ由两部分组成，一个经修改过的操作系统核心与一套用户工具。&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/OpenVZ"&gt;Wikipedia:OpenVZ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说,OpenVZ 架构不是像 KVM Vmware 一类的完全虚拟化.而且 &lt;ruby&gt;&lt;rb&gt;容易&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;几乎总是&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 被服务商超售(不然咋会卖那么便宜😂😂).&lt;/p&gt;
&lt;p&gt;不过由于和 &lt;ruby&gt;&lt;rb&gt;主机&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;母鸡&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 共享内核，听说会有性能优势？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;购买时的一点吐槽&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://portal.vpsto.com/cart.php?gid=9"&gt;链接在这,标准的 WHMCS 面板.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可是为啥服务开通的确认邮件被 Yandex Mail 当作 spam 了啊 (ノ=Д=)ノ┻━┻&lt;/p&gt;
&lt;p&gt;除了这个其它还OK,VPS 的管理界面也是标准的 SolusVM 面板。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;真的是太标准了好像连主题都没改😂😂&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;另外没有咱喜欢的 Arch Linux 还是很遗憾呐~(卷把锅甩给了OpenVZ,因为母鸡定制的内核太老 (2.6.x) 😂😂&lt;/p&gt;
&lt;p&gt;顺便提一下这次咱买的是最便宜的那个(一个月也要99😂😂),配置大概像这样:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 Core CPU&lt;/p&gt;
&lt;p&gt;1 GB Guaranteed RAM&lt;/p&gt;
&lt;p&gt;25 GB HDD&lt;/p&gt;
&lt;p&gt;400 GB Premium Traffic @ 100Mbps Bandwidth&lt;/p&gt;
&lt;p&gt;SoftLayer Hong Kong Datacenter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;日常&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;刚开通时的系统是 CentOS 6 , &lt;del&gt;吓的咱赶紧换成了 Debian 8&lt;/del&gt;,VPS 控制面板上就重装系统,大概一两分钟左右吧.&lt;/p&gt;
&lt;p&gt;登录,先 apt update 一下,连的好像是 Debian 官方的仓库,速度不够快.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# apt update&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;.....&lt;/span&gt;
&lt;span class="code-line"&gt;Fetched &lt;span class="m"&gt;528&lt;/span&gt; kB in 5s &lt;span class="o"&gt;(&lt;/span&gt;94.2 kB/s&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来更新系统,速度在 2M/s 左右,还可以(懒得换镜像源了😂😂&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;root@s17931102:~# apt full-upgrade&lt;/span&gt;
&lt;span class="code-line"&gt;Reading package lists... Done&lt;/span&gt;
&lt;span class="code-line"&gt;Building dependency tree&lt;/span&gt;
&lt;span class="code-line"&gt;Reading state information... Done&lt;/span&gt;
&lt;span class="code-line"&gt;Calculating upgrade... Done&lt;/span&gt;
&lt;span class="code-line"&gt;The following NEW packages will be installed:&lt;/span&gt;
&lt;span class="code-line"&gt;    e2fsprogs init libss2&lt;/span&gt;
&lt;span class="code-line"&gt;The following packages will be upgraded:&lt;/span&gt;
&lt;span class="code-line"&gt;    cpio libc-bin libc6 libgcrypt20 locales multiarch-support&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;6&lt;/span&gt; upgraded, &lt;span class="m"&gt;3&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;0&lt;/span&gt; not upgraded.&lt;/span&gt;
&lt;span class="code-line"&gt;Need to get 11.5 MB of archives.&lt;/span&gt;
&lt;span class="code-line"&gt;After this operation, &lt;span class="m"&gt;3327&lt;/span&gt; kB of additional disk space will be used.&lt;/span&gt;
&lt;span class="code-line"&gt;Do you want to &lt;span class="k"&gt;continue&lt;/span&gt;? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;...&lt;/span&gt;
&lt;span class="code-line"&gt;Fetched 11.5 MB in 4s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2705&lt;/span&gt; kB/s&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;胡乱的性能测试&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.freehao123.com/vps-cpu-io-unixbench/"&gt;咱照着这篇文章小小的测试了一下😂😂&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CPU 是 Intel(R) Xeon(R) CPU E5-2650 v3 @ 2.30GHz .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# cat /proc/cpuinfo&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;processor   : 0&lt;/span&gt;
&lt;span class="code-line"&gt;vendor_id   : GenuineIntel&lt;/span&gt;
&lt;span class="code-line"&gt;cpu family  : 6&lt;/span&gt;
&lt;span class="code-line"&gt;model               : 63&lt;/span&gt;
&lt;span class="code-line"&gt;model name  : Intel&lt;span class="o"&gt;(&lt;/span&gt;R&lt;span class="o"&gt;)&lt;/span&gt; Xeon&lt;span class="o"&gt;(&lt;/span&gt;R&lt;span class="o"&gt;)&lt;/span&gt; CPU E5-2650 v3 @ 2.30GHz&lt;/span&gt;
&lt;span class="code-line"&gt;stepping    : 2&lt;/span&gt;
&lt;span class="code-line"&gt;microcode   : 45&lt;/span&gt;
&lt;span class="code-line"&gt;cpu MHz             : 2300.033&lt;/span&gt;
&lt;span class="code-line"&gt;cache size  : &lt;span class="m"&gt;25600&lt;/span&gt; KB&lt;/span&gt;
&lt;span class="code-line"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="tag"&gt;free -m&lt;/span&gt; 了一下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;root@s17931102:~# free -m&lt;/span&gt;
&lt;span class="code-line"&gt;             total       used       free     shared    buffers     cached&lt;/span&gt;
&lt;span class="code-line"&gt;Mem:          &lt;span class="m"&gt;1024&lt;/span&gt;        &lt;span class="m"&gt;315&lt;/span&gt;        &lt;span class="m"&gt;708&lt;/span&gt;         &lt;span class="m"&gt;14&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;        292&lt;/span&gt;
&lt;span class="code-line"&gt;-/+ buffers/cache:         &lt;span class="m"&gt;23&lt;/span&gt;       1000&lt;/span&gt;
&lt;span class="code-line"&gt;Swap:            &lt;span class="m"&gt;0&lt;/span&gt;          &lt;span class="m"&gt;0&lt;/span&gt;          0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Debian 8 Minimal,还没有装任何软件时大概用掉了23M 内存.&lt;/p&gt;
&lt;p&gt;&lt;span class="tag"&gt;dd&lt;/span&gt; 了两下,速度不错:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;root@s17931102:~# dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;64k &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4k &lt;span class="nv"&gt;oflag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dsync&lt;/span&gt;
&lt;span class="code-line"&gt;4096+0 records in&lt;/span&gt;
&lt;span class="code-line"&gt;4096+0 records out&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;268435456&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;268&lt;/span&gt; MB&lt;span class="o"&gt;)&lt;/span&gt; copied, 1.08052 s, &lt;span class="m"&gt;248&lt;/span&gt; MB/s&lt;/span&gt;
&lt;span class="code-line"&gt;root@s17931102:~# dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8k &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;256k &lt;span class="nv"&gt;conv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;fdatasync&lt;/span&gt;
&lt;span class="code-line"&gt;262144+0 records in&lt;/span&gt;
&lt;span class="code-line"&gt;262144+0 records out&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2147483648&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;2.1 GB&lt;span class="o"&gt;)&lt;/span&gt; copied, 2.51345 s, &lt;span class="m"&gt;854&lt;/span&gt; MB/s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下载一个来自 Cachefly 的测速文件,差不多跑满了 100Mb 的带宽:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;root@s17931102:~# wget http://cachefly.cachefly.net/100mb.test&lt;/span&gt;
&lt;span class="code-line"&gt;Resolving cachefly.cachefly.net &lt;span class="o"&gt;(&lt;/span&gt;cachefly.cachefly.net&lt;span class="o"&gt;)&lt;/span&gt;... 205.234.175.175&lt;/span&gt;
&lt;span class="code-line"&gt;Connecting to cachefly.cachefly.net &lt;span class="o"&gt;(&lt;/span&gt;cachefly.cachefly.net&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;205.234.175.175&lt;span class="p"&gt;|&lt;/span&gt;:80... connected.&lt;/span&gt;
&lt;span class="code-line"&gt;HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class="code-line"&gt;Length: &lt;span class="m"&gt;104857600&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;100M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Saving to: &lt;span class="s1"&gt;'100mb.test'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;100mb.test                    100%&lt;span class="o"&gt;[===================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; 100.00M  11.7MB/s   in 9.0s&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;2016-02-22 02:52:54 &lt;span class="o"&gt;(&lt;/span&gt;11.1 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="s1"&gt;'100mb.test'&lt;/span&gt; saved &lt;span class="o"&gt;[&lt;/span&gt;104857600/104857600&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从 &lt;a class="reference external" href="/links.html#cuihao"&gt;cuihao&lt;/a&gt; 的镜像源下载 Arch Linux 的安装映像,也能跑满百兆带宽:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;root@s17931102:~# wget https://mirrors.ustc.edu.cn/archlinux/iso/2016.02.01/archlinux-2016.02.01-dual.iso&lt;/span&gt;
&lt;span class="code-line"&gt;Resolving mirrors.ustc.edu.cn &lt;span class="o"&gt;(&lt;/span&gt;mirrors.ustc.edu.cn&lt;span class="o"&gt;)&lt;/span&gt;... 202.141.176.110, 2001:da8:d800:95::110&lt;/span&gt;
&lt;span class="code-line"&gt;Connecting to mirrors.ustc.edu.cn &lt;span class="o"&gt;(&lt;/span&gt;mirrors.ustc.edu.cn&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;202.141.176.110&lt;span class="p"&gt;|&lt;/span&gt;:443... connected.&lt;/span&gt;
&lt;span class="code-line"&gt;HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK&lt;/span&gt;
&lt;span class="code-line"&gt;Length: &lt;span class="m"&gt;735051776&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;701M&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Saving to: &lt;span class="s1"&gt;'archlinux-2016.02.01-dual.iso'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;archlinux-2016.02.01-dual.iso 100%&lt;span class="o"&gt;[===================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; 701.00M  11.7MB/s   in 63s&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;2016-02-22 02:57:09 &lt;span class="o"&gt;(&lt;/span&gt;11.2 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - &lt;span class="s1"&gt;'archlinux-2016.02.01-dual.iso'&lt;/span&gt; saved &lt;span class="o"&gt;[&lt;/span&gt;735051776/735051776&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于没装web服务器所以先不测试出口带宽......&lt;/p&gt;
&lt;p&gt;运行了一个小脚本来测速,噫可赛艇~:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://freevps.us/downloads/bench.sh"&gt;http://freevps.us/downloads/bench.sh&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Speedtest &lt;span class="o"&gt;(&lt;/span&gt;IPv4 only&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;---------------------&lt;/span&gt;
&lt;span class="code-line"&gt;Your public IPv4 is foo&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Location            Provider        Speed&lt;/span&gt;
&lt;span class="code-line"&gt;CDN                 Cachefly        11.1MB/s&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Atlanta, GA, US             Coloat          7.26MB/s&lt;/span&gt;
&lt;span class="code-line"&gt;Dallas, TX, US              Softlayer       8.13MB/s&lt;/span&gt;
&lt;span class="code-line"&gt;Seattle, WA, US             Softlayer       10.6MB/s&lt;/span&gt;
&lt;span class="code-line"&gt;San Jose, CA, US    Softlayer       9.82MB/s&lt;/span&gt;
&lt;span class="code-line"&gt;Washington, DC, US  Softlayer       9.11MB/s&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Tokyo, Japan                Linode          11.2MB/s&lt;/span&gt;
&lt;span class="code-line"&gt;Singapore           Softlayer       11.5MB/s&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Rotterdam, Netherlands      id3.net         6.91MB/s&lt;/span&gt;
&lt;span class="code-line"&gt;Haarlem, Netherlands        Leaseweb        7.45MB/s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;综上所述,网速棒棒哒~&lt;/p&gt;
&lt;p&gt;编译来自 &lt;a class="reference external" href="http://lnmp.org"&gt;lnmp.org&lt;/a&gt; 的LNMP 一键安装包......&lt;/p&gt;
&lt;p&gt;用了40多分钟,算不算快咧 _(:з」∠)_&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;一点总结&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;总之卷的 VPS 还是很棒呐~(๑•̀ㅂ•́)و✧，不过真的还是有些贵😂😂，对于只想搭个梯子的人来讲花销有些大 (´･ω･`).&lt;/p&gt;
&lt;p&gt;&lt;del&gt;为了接着用 Arch Linux,咱还是回去用 conoha 吧 _(:з」∠)_&lt;/del&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>MediaWiki 设置SMTP发送邮件</title><link href="https://blog.yoitsu.moe/tech/smtp_for_mediawiki.html" rel="alternate"></link><updated>2016-02-18T15:20:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-02-18:tech/smtp_for_mediawiki.html</id><summary type="html">
&lt;p&gt;为 MediaWiki 设置通过 SMTP 发送邮件.就是这样  _(:з」∠)_&lt;/p&gt;

&lt;div class="section" id="smtp"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;为啥要搞 SMTP 发信?&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;邮件功能在重置密码和通知时非常重要 (･ω･)&lt;/li&gt;
&lt;li&gt;听说用 PHP 的 mail() 函数发送的邮件容易被当成垃圾邮件(然而咱压根没收到😂&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以才要搞 SMTP 呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;安装需要的库&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PHP 7 木有 pear 啦 (Arch Linux 官方源在 PHP7 升级后从官方源里移除了 &lt;span class="tag"&gt;php-pear&lt;/span&gt; )~,所以通过 composer 安装呗~&lt;/p&gt;
&lt;p&gt;首先安装上 composer ,如果汝在用 Arch Linux 的话:&lt;/p&gt;
&lt;blockquote&gt;
sudo pacman -S php-composer&lt;/blockquote&gt;
&lt;p&gt;其它系统的话,可以参照 &lt;a class="reference external" href="https://getcomposer.org/download/"&gt;Composer 官方的安装指南&lt;/a&gt; 进行安装呗~&lt;/p&gt;
&lt;p&gt;在安装上 composer 以后安装 mail 和 smtp 包:&lt;/p&gt;
&lt;blockquote&gt;
composer require --update-no-dev pear/mail pear/net_smtp&lt;/blockquote&gt;
&lt;p&gt;如果汝像咱一样安装的是 alpha 版(从 Git 下载的,去掉 &lt;span class="tag"&gt;--update-no-dev&lt;/span&gt; 选项.&lt;/p&gt;
&lt;p&gt;还在用 PHP 5? 用 pear 安装:&lt;/p&gt;
&lt;blockquote&gt;
sudo pear install Mail Net_SMTP&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="wgsmtp-wgpasswordsender"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;设置 $wgSMTP 和 $wgPasswordSender 变量&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.mediawiki.org/wiki/Manual:$wgSMTP"&gt;MediaWiki.org 的指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="tag"&gt;$wgSMTP&lt;/span&gt; 大概像这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$wgSMTP = array(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'host'     =&amp;gt; "mail.example.com", // SMTP 服务器的地址 (或IP).如果使用了SSL,记得加上 ssl://&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'IDHost'   =&amp;gt; "example.com",      // 汝的域名,可选.如果不设置的话会设置成 $wgServer 的值.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'port'     =&amp;gt; 25,                 // 端口(一般是25,SSL是465,StartTLS是587)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'auth'     =&amp;gt; true,               // 是否需要 SMTP 认证 (多半都需要呗~)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'username' =&amp;gt; "my_user_name",     // SMTP 认证的用户名.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'password' =&amp;gt; "my_password"       // SMTP 认证的密码.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举个栗子  _(:з」∠)_ :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$wgSMTP = array(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'host'     =&amp;gt; "smtp.yandex.com", // 咱用的是 Yandex 的 Domain mail~&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'port'     =&amp;gt; 587,                 // StartTLS =w=&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'auth'     =&amp;gt; true,               // 需要登录 😂&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'username' =&amp;gt; "sender@yoitsu.moe",     // 用户名啦~&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;    'password' =&amp;gt; "foo"       // 密码啦~&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="x"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有些时候 SMTP 服务器要求外发邮件地址中的发件人和实际一致 (例如 Yandex ),这时需要设置 &lt;span class="tag"&gt;$wgPasswordSender&lt;/span&gt; 变量:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$wgPasswordSender="sender@yoitsu.moe";&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改完以后用某个功能(例如修改邮件地址测试一下呗~):&lt;/p&gt;
&lt;img alt="Parsoid的工作原理" class="img-responsive" src="images/smtptest.png"/&gt;
&lt;/div&gt;
</summary><category term="mediawiki"></category><category term="notes"></category></entry><entry><title>在 Arch Linux 上安装 Ghost 博客系统</title><link href="https://blog.yoitsu.moe/tech/ghost_blog_archlinux.html" rel="alternate"></link><updated>2016-02-14T00:00:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-02-14:tech/ghost_blog_archlinux.html</id><summary type="html">
&lt;p&gt;先祝大家 &lt;ruby&gt;&lt;rb&gt;情人节&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;烧烤节&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 快乐~ (2333&lt;/p&gt;
&lt;p&gt;&lt;del&gt;为了让旅伴发发牢骚,就装了一个 Ghost 博客系统咯~&lt;/del&gt;&lt;/p&gt;

&lt;div class="section" id="ghost"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;汝连啥是 Ghost 都不知道?&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Ghost是用JavaScript编写的博客平台，基于MIT许可证开放源代码。Ghost的设计主旨是简化个人网站发布以及网上出版的过程。&lt;/p&gt;
&lt;p&gt;Ghost是一款个人博客系统，它是使用Node.js语言和MySQL数据库开发的，同时支持MySQL、MariaDB、SQLite和PostgreSQL。用户可以在支持Node.js的服务器上使用自己的博客。&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/Ghost_%28%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0%29"&gt;Wikipedia 上的 "Ghost (博客平台)" 条目&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说,Ghost 是一套博客平台,是一套博客平台,是一套博客平台! &lt;del&gt;(重要的事情说三遍😂😂)&lt;/del&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;要安装 Ghost 需要啥?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;因为 Ghost 是用 Node.js 写成的,所以要安装 Ghost , 汝需要先装上 Node.js 和 npm 呗~&lt;/p&gt;
&lt;div class="tag warning fg-white compound"&gt;
&lt;p class="compound-first"&gt;截至写这篇文章时,Arch Linux 官方源里 Node.js 的版本是 5.6.0 ,而 Ghost 的计划是只支持 Node.js 的 &lt;ruby&gt;&lt;rb&gt;LTS&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;长期支援&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 版本, 而 Node.js 的长期支援版本是 0.10x,0.12x和4.2 .所以嘛......&lt;/p&gt;
&lt;p class="compound-last"&gt;这里(和咱在 AUR 的 ghost 软件包里)用到了一个环境变量 &lt;span class="tag"&gt;GHOST_NODE_VERSION_CHECK=false&lt;/span&gt; 来不让 ghost 来检查 node 的版本,在 Node.js 下一个 LTS 版本(6.x)出来前先凑合一下呗~&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;于是先安装 &lt;a class="reference external" href="https://www.archlinux.org/packages/?name=nodejs"&gt;nodejs&lt;/a&gt; 和 &lt;a class="reference external" href="https://www.archlinux.org/packages/?name=npm"&gt;npm&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S nodejs npm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果汝认为自己的博客会做的比较大,需要一个数据库系统的话,咱推荐 &lt;a class="reference external" href="https://www.archlinux.org/packages/?name=mariadb"&gt;mariadb&lt;/a&gt; 呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aur-ghost"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;从 AUR 安装 Ghost&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;然后从 AUR 安装 &lt;a href="https://aur.archlinux.org/packages/?O=0&amp;amp;K=ghost" title="在 AUR 上搜索ghost"&gt;ghost &lt;sup&gt;AUR&lt;/sup&gt; &lt;/a&gt; (这个包是咱更新的,有问题尽管 pia 咱~).&lt;/p&gt;
&lt;p&gt;如果汝有 yaourt 的话, &lt;span class="tag"&gt;yaourt -S ghost&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这会把 ghost 安装在 &lt;span class="tag"&gt;/srv/ghost/&lt;/span&gt; 目录,由于创建的 ghost 用户不能通过 shell 登录,要修改这个目录的文件的话:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;修改 &lt;span class="tag"&gt;/etc/passwd&lt;/span&gt; 文件:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ghost:x:738:738::/srv/ghost:/usr/bin/nologin&lt;/p&gt;
&lt;p&gt;把 &lt;span class="tag"&gt;/usr/bin/nologin&lt;/span&gt; 换成 &lt;span class="tag"&gt;/bin/bash&lt;/span&gt; ,保存.&lt;/p&gt;
&lt;p&gt;这样以后可以通过 &lt;span class="tag"&gt;sudo su ghost&lt;/span&gt; 切换到 ghost 用户对 /srv/ghost 目录写入了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;通过下面的命令以 ghost 用户运行一条命令:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# su 后面的 -s 参数可以制定切换用户后运行的 shell ,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# -c 参数可以指定要运行的命令.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;sudo su ghost -s /bin/bash -c &lt;span class="s2"&gt;"此处是汝的命令,记得带上引号"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;通过源代码安装 Ghost&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先把 ghost 的源代码下载下来并解开:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 这时最新的版本是0.7.6.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;wget https://ghost.org/zip/ghost-0.7.6.zip&lt;/span&gt;
&lt;span class="code-line"&gt;unzip ghost-0.7.6.zip&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ghost-0.7.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来通过 npm 安装需要的依赖,因为上面的提示嘛~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;GHOST_NODE_VERSION_CHECK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; npm install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;修改配置文件&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果是通过 AUR 安装的,配置文件位于 &lt;span class="tag"&gt;/srv/ghost/config.js&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果是通过源代码安装的,从目录中先复制一份样例出来呗~&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;cp config.example.js config.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里的例子是修改 &lt;span class="tag"&gt;Production&lt;/span&gt; 一节
(这一节是汝的 Ghost 实际运行时的配置,下面的 Development 一节是开发时的配置)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// ### Production&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// When running Ghost in the wild, use the production environment.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// Configure your URL and mail settings here&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nx"&gt;production&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="c1"&gt;// 汝的网址?&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nx"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="c1"&gt;// 汝想使用那种数据库?&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="c1"&gt;// 下面的例子是 sqlite3 数据库,配置文件中还有设置 MariaDB 数据库 的样例&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'sqlite3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/content/data/ghost.db'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="p"&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;falseProduction&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="p"&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'2368'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;如果汝的 Ghost 和汝进行操作的电脑是同一个&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过下面的命令来测试汝的 Ghost 呗~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/ghost&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;GHOST_NODE_VERSION_CHECK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果汝是从 AUR 安装的,可以通过 Systemd 来启动&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl start ghost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在打开 &lt;span class="tag"&gt;http://localhost:2368&lt;/span&gt; 看看效果呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;如果汝的 Ghost 和汝进行操作的电脑不是同一个&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;比如汝在 VPS 上安装了 Ghost,就需要用一个 web服务器通过反向代理来访问呗~&lt;/p&gt;
&lt;p&gt;首先修改 &lt;span class="tag"&gt;config.js&lt;/span&gt; 把 Production 中的 URL 换成汝的网址啦~&lt;/p&gt;
&lt;p&gt;如果汝在用 Nginx, 把这一段增加到汝的 &lt;span class="tag"&gt;server&lt;/span&gt; 块中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;location / {&lt;/span&gt;
&lt;span class="code-line"&gt;      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;
&lt;span class="code-line"&gt;      proxy_set_header Host $http_host;&lt;/span&gt;
&lt;span class="code-line"&gt;      proxy_set_header X-Forwarded-Proto $scheme;&lt;/span&gt;
&lt;span class="code-line"&gt;      proxy_pass http://127.0.0.1:2368;&lt;/span&gt;
&lt;span class="code-line"&gt;      # 汝的更多自定义设置&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果汝在用 Apache, 把下面一段添加到汝的 httpd.conf 的 vhost 段中(首先要启用 mod_proxy 模块~):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;ProxyPass / http://localhost:2368/&lt;/span&gt;
&lt;span class="code-line"&gt;ProxyPassReverse / http://localhost:2368/&lt;/span&gt;
&lt;span class="code-line"&gt;ProxyHTMLURLMap http://localhost:2368/ /&lt;/span&gt;
&lt;span class="code-line"&gt;RequestHeader set X-Forwarded-For $proxy_add_x_forwarded_for&lt;/span&gt;
&lt;span class="code-line"&gt;RequestHeader set Host $host&lt;/span&gt;
&lt;span class="code-line"&gt;RequestHeader set X-Forwarded-Proto $scheme&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后重新启动 ghost 和 web 服务器以后试试通过汝的网址访问?&lt;/p&gt;
&lt;p&gt;打开 &lt;span class="tag"&gt;http://汝的ghost网址/ghost/&lt;/span&gt; 开始设置汝的 Ghost 博客呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;参考资料&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://support.ghost.org/developers"&gt;Ghost Blog 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://httpd.apache.org/docs/2.4/mod/mod_proxy.html"&gt;Apache httpd mod_proxy 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Arch Linux"></category><category term="partner"></category></entry><entry><title>AUR 纯萌新向入门教学(3)-提交软件包到AUR</title><link href="https://blog.yoitsu.moe/tech/aur_sumbiting_guidebook.html" rel="alternate"></link><updated>2016-02-05T00:00:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-02-05:tech/aur_sumbiting_guidebook.html</id><summary type="html">
&lt;p&gt;通过上一次的 &lt;a class="reference external" href="/aur_packaging_guidebook.html"&gt;「创建一个软件包」&lt;/a&gt; ,
汝应该已经创建了一个 &lt;del&gt;(或是 N 个)&lt;/del&gt; 软件包了吧,如果汝想分享给其它人的话,上传到 AUR 其实是最方便的方法呗~&lt;/p&gt;

&lt;div class="tag info fg-white compound"&gt;
&lt;p&gt;前几天被 &lt;a class="alert-link reference external" href="//webchat.freenode.net/?channels=archlinux-cn"&gt;#archlinux-cn&lt;/a&gt; 的各位吐槽了中文和英文之间空格的问题,原谅咱写文章时太随性😂&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arch-user-repository"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;再来回顾一下 Arch User Repository 的打包规范呗~&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;不合规范的软件包可能会在不经过提醒的话直接删除.&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_packaging_standards_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"&gt;Arch Linux 打包标准&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于某些特定平台的软件包(例如 Web 应用)有不同的打包规范,记得看哦~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_User_Repository_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E6.8F.90.E4.BA.A4.E8.BD.AF.E4.BB.B6.E5.8C.85.E7.9A.84.E8.A7.84.E5.88.99"&gt;提交软件包到 AUR 的规则&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils"/&gt;
&lt;p&gt;看了 Wiki 以后,是否觉得自己的软件包符合规范了?&lt;/p&gt;
&lt;p&gt;如果确定的话,接着往下看呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;第一步:注册一个 AUR 帐号&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;去 &lt;a class="reference external" href="https://aur.archlinux.org/register/"&gt;https://aur.archlinux.org/register/&lt;/a&gt; 注册一个帐号呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aur-ssh"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;第二步:为 AUR 准备一个 SSH 密钥&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;因为 AUR 现在用 Git 提交,所以没有一个 SSH 密钥是不行的呐~,
建议为 AUR 生成一个新的证书,这样一旦发现问题就可以直接吊销诶(不要把鸡蛋放在一个篮子里~)&lt;/p&gt;
&lt;p&gt;可以用 &lt;span class="tag"&gt;ssh-keygen&lt;/span&gt; 命令生成新的密钥:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;$ ssh-keygen&lt;/span&gt;
&lt;span class="code-line"&gt;Generating public/private rsa key pair.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 为汝的公钥和私钥决定一个存放的位置呗~&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/home/horo/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:&lt;/span&gt;
&lt;span class="code-line"&gt;/home/horo/.ssh/example&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 为私钥设置一个密码,可以省略,但是为了安全还是设置一个呐~&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:&lt;/span&gt;
&lt;span class="code-line"&gt;Enter same passphrase again:&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 汝的私钥保存在汝决定的路径中&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Your identification has been saved in /home/horo/.ssh/example.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 汝的公钥保存在汝决定的路径中,不过扩展名为.pub&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Your public key has been saved in /home/horo/.ssh/example.pub.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 这是汝的密钥指纹,用来区分不同的密钥&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;The key fingerprint is:&lt;/span&gt;
&lt;span class="code-line"&gt;SHA256:mwk7FvA2E0ycw+E8NYOr1+OL3+0qnF6PFMZ/Ndxuw84 horo@Yotisu&lt;/span&gt;
&lt;span class="code-line"&gt;The key&lt;span class="err"&gt;'&lt;/span&gt;s randomart image is:&lt;/span&gt;
&lt;span class="code-line"&gt;+---&lt;span class="o"&gt;[&lt;/span&gt;RSA 2048&lt;span class="o"&gt;]&lt;/span&gt;----+&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;|&lt;/span&gt;     oo++        &lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt;*. o       &lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;|&lt;/span&gt;    . *o         &lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;|&lt;/span&gt;     o.o .    . .&lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;|&lt;/span&gt;     .B.S +    oo&lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;|&lt;/span&gt;    ...*o&lt;span class="o"&gt;=&lt;/span&gt; o  .o.&lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;|&lt;/span&gt;     .+o+oo . .oo&lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;|&lt;/span&gt;     . &lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;+ + .o..&lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;|&lt;/span&gt;      .o+o+o+  E &lt;span class="p"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;+----&lt;span class="o"&gt;[&lt;/span&gt;SHA256&lt;span class="o"&gt;]&lt;/span&gt;-----+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在 AUR Web 界面上点击 "My Account (我的账户)" ,把汝的公钥里的内容填进 "SSH Public Key:" 一节中,保存.&lt;/p&gt;
&lt;p&gt;接下来编辑 &lt;span class="tag"&gt;~/.ssh/config&lt;/span&gt; ,
告诉ssh命令连接到 &lt;span class="tag"&gt;aur.archlinux.org&lt;/span&gt; 用汝新创建的密钥呗~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Host aur.archlinux.org&lt;/span&gt;
&lt;span class="code-line"&gt;    IdentityFile ~/.ssh/example &lt;span class="c1"&gt;# 记得用汝自己的私钥路径&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    User foo &lt;span class="c1"&gt;# 记得换成汝自己的用户名.&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;第三步:提交软件包到 AUR&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用下面的命令创建一个新的仓库:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 用汝希望的名称替换foobar.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 从不存在的仓库中克隆或推送，将会自动创建此仓库。&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;git clone ssh://aur@aur.archlinux.org/foobar.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时汝的当前目录下会多出一个以汝的软件包名命名的文件夹(例如 &lt;span class="tag"&gt;foobar&lt;/span&gt; ),
把汝的软件包需要的文件(PKGBUILD,有时还有些其他的文件)放到这个文件夹内.&lt;/p&gt;
&lt;p&gt;接着记得写一个 &lt;span class="tag"&gt;.SRCINFO&lt;/span&gt; (供 AUR Web 界面解析的元数据),
可以通过 &lt;a class="reference external" href="https://www.archlinux.org/packages/?name=pkgbuild-introspection"&gt;pkgbuild-introspection&lt;/a&gt; 包内的 &lt;span class="tag"&gt;mksrcinfo&lt;/span&gt; 工具生成.&lt;/p&gt;
&lt;div class="tag warning fg-white compound"&gt;
&lt;p&gt;每一次提交都要包含最新的 &lt;span class="tag"&gt;.SRCINFO&lt;/span&gt; 文件!不然服务器会 &lt;del&gt;傲娇的&lt;/del&gt; 拒绝汝的提交呐~&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;然后普通的使用 Git 来提交呗~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 还是老话,不要照抄,按汝实际的状况来.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;git add .&lt;/span&gt;
&lt;span class="code-line"&gt;git commit -m &lt;span class="s2"&gt;"Example"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;git push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 AUR 上搜索汝的软件包试试?(像这样 &lt;a href="https://aur.archlinux.org/packages/?O=0&amp;amp;K=parsoid-git" title="在 AUR 上搜索parsoid-git"&gt;parsoid-git &lt;sup&gt;AUR&lt;/sup&gt; &lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;可能的后续工作&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;汝以为把软件包提交上就结束了?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;一旦上游更新了,汝就要及时的更新诶(年久失修的包会被删除)&lt;/li&gt;
&lt;li&gt;关注下方的评论,聆听用户的 &lt;ruby&gt;&lt;rb&gt;建议&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;抱怨&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 并试着改进汝的软件包呗~&lt;/li&gt;
&lt;li&gt;发觉自己没有精力维护某个软件包?可以通过AURweb界面 disown 一个软件包或是在AUR邮件列表发条消息.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Arch Linux"></category><category term="AUR"></category><category term="Guides"></category></entry><entry><title>AUR 纯萌新向入门教学(2)-创建一个软件包</title><link href="https://blog.yoitsu.moe/tech/aur_packaging_guidebook.html" rel="alternate"></link><updated>2016-02-03T00:00:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-02-03:tech/aur_packaging_guidebook.html</id><summary type="html">
&lt;p&gt;上一次咱说了 &lt;a class="reference external" href="/aur_fresh_guidebook.html"&gt;「从AUR中安装软件包」&lt;/a&gt; ,其实如果汝足够 &lt;del&gt;触&lt;/del&gt; 的话,不妨自己创建个软件包呗~&lt;/p&gt;

&lt;div class="section" id="archwiki"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;首先为啥不读读ArchWiki咧?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;ArchWiki ,短小精悍,汝值得拥有呐~&lt;/del&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Creating_packages_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29"&gt;创建软件包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/PKGBUILD_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29"&gt;PKGBUILD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_packaging_standards_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"&gt;Arch Linux 打包标准&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果因为各种原因看了Wiki还不明白的话,接着往下看呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;第一步:以普通的方式安装软件&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;看看 &lt;span class="tag"&gt;base-devel&lt;/span&gt; 装了没?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S base-devel --needed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上游把软件的源代码下载下来,按照上游的文档编译和安装(典型的例子像这样):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;./configure&lt;/span&gt;
&lt;span class="code-line"&gt;make&lt;/span&gt;
&lt;span class="code-line"&gt;make install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果汝为了顺利安装做了任何的调整(比如改了些源码或者打上了补丁),记下来操作步骤,待会儿编写PKGBUILD时要用到哟~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;第二步:编写PKGBUILD文件&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;PKGBUILD是一个shell脚本,包含 Arch Linux 在构建软件包时需要的信息.&lt;/p&gt;
&lt;p&gt;Arch Linux 用 makepkg 创建软件包.当 makepkg 运行时,它会在当前目录寻找 PKGBUILD 文件,并依照其中的指令去获取依赖文件,编译出 pkgname.pkg.tar.xz 文件.生成的包内有二进制文件和安装指令,可以使用 pacman 进行安装.&lt;/p&gt;
&lt;p&gt;pkgname,pkgver,pkgrel和arch是必须包含的变量.license在构建包时并不强制要求,但若要分享 PKGBUILD文件,推荐加上该变量,否则 makepkg 会有警告.&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/PKGBUILD_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29"&gt;ArchWiki:PKGBUILD&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;获得原型&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ArchWiki上关于PKGBUILD的介绍已经很详细啦~,从 &lt;span class="tag"&gt;/usr/share/pacman/&lt;/span&gt; 找个合适的原型复制下来:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PKGBUILD.proto       (经典原型😂)&lt;/li&gt;
&lt;li&gt;PKGBUILD-vcs.proto   (如果汝的源码来自像SubVersion,Git,Mercurial一类的 &lt;ruby&gt;&lt;rb&gt;SCCS&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;源代码控制系统&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 的话,看下这份原型呗~)&lt;/li&gt;
&lt;li&gt;PKGBUILD-split.proto (如果汝要做一个分包的话)&lt;/li&gt;
&lt;li&gt;proto.install        (希望在安装之前/之后运行一些别的命令?看看这份原型呗~)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阅读原型上的注释,然后删掉(随汝心意啦,但是如果汝想上传软件包的话,[Maintainer/偶尔会有的Contributor]是必须的😂)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;起个名字&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;软件包的名字保存在pkgname里,只能用小写字母、数字和@ . _ + - 这些字符，且不允许用.或者-作开头。&lt;/p&gt;
&lt;p&gt;别和 AUR 或官方仓库里面的软件包重名了哟~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;挑个许可协议&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为了不造轮子,`传送门在此~ &amp;lt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/PKGBUILD_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87"&gt;https://wiki.archlinux.org/index.php/PKGBUILD_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87&lt;/a&gt;)#license&amp;gt;`_&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;编译和安装时的命令&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;makepkg的运行顺序大概像这样(从上到下):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;获得,解压和检查源代码的散列值.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;pkgver():在汝的源代码来自各种SCCS时会有用,用来更新软件包的版本号.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/VCS_package_guidelines#The_pkgver.28.29_function"&gt;ArchWiki:VCS_package_guidelines&lt;/a&gt; 有一些范例,可以看看呗~&lt;/p&gt;
&lt;p&gt;不过记得得给 &lt;span class="tag"&gt;pkgver&lt;/span&gt; 变量随便赋个值先......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;prepare():一些预处理源文件以进行构建的命令,比如打补丁......&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把汝为了让源代码顺利编译而运行的操作加到这里.不过首先要切换到源码目录呗~&lt;/p&gt;
&lt;p&gt;如果汝在编译前不需要干任何事情,这个函数可以不用.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;build():真正 &lt;del&gt;撸起袖子&lt;/del&gt; 开始编译软件包的过程.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果汝的软件包啥都不用编译,这个函数可以不用.&lt;/p&gt;
&lt;p&gt;对于普通的configure-make-make install三部曲来说,build()可以写成这样(汝来决定那些注释的去留呗~)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 切换到源码目录&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$srcdir&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$pkgname&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$pkgver&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# configure 和 make ,按照Arch Linux的规范,软件包都装在/usr目录&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 汝也许要按照上游的指示添加别的参数呐~&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr&lt;/span&gt;
&lt;span class="code-line"&gt;make&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不要在这个函数中让用户进行交互,见 &lt;a class="reference external" href="https://bugs.archlinux.org/task/13214"&gt;某个bug报告&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;check():用来执行make check和其他一些例行测试的地方,有时需要.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;package():把生成的文件打包成软件包的函数, &lt;strong&gt;只有这个函数是必须的.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pkg目录复制了根目录下软件安装路径的继承关系.
如果汝需要手动把文件放到根目录下,那么在这里你需要把文件放在pkg下相同的文件层级结构中诶~.
比如,把一个文件安装到/usr/bin,那么在伪root环境中对应的路径为$pkgdir/usr/bin.&lt;/p&gt;
&lt;p&gt;对于普通的configure-make-make install三部曲来说,package()可以写成这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;make &lt;span class="nv"&gt;DESTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$pkgdir&lt;/span&gt;&lt;span class="s2"&gt;/"&lt;/span&gt; install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在一些很罕见的情况下,软件只有安装在单一目录下时才能运行.在这种情况下汝还是老老实实把它安装到$pkgdir/opt下吧.&lt;/p&gt;
&lt;p&gt;通常,软件在安装过程中会在pkg目录下先创建一系列子目录.如果没有的话,makepkg会报错,记得先在build()函数中提前手动创建这些目录哟.&lt;/p&gt;
&lt;p&gt;同build(),不要在这个函数中让用户进行交互.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;安装前后有事要做?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果汝要在安装/升级/卸载前后运行其它命令,可以写个.install文件:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pre_install - 安装前运行的脚本,可以传递版本号为参数.&lt;/li&gt;
&lt;li&gt;post_install - 安装后运行的脚本,可以传递版本号为参数.&lt;/li&gt;
&lt;li&gt;pre_upgrade - 升级前运行的脚本,可以按新版本号,旧版本号的顺序传递参数.&lt;/li&gt;
&lt;li&gt;post_upgrade - 升级后运行的脚本,可以按新版本号,旧版本号的顺序传递参数.&lt;/li&gt;
&lt;li&gt;pre_remove - 卸载前运行的脚本,可以传递版本号为参数.&lt;/li&gt;
&lt;li&gt;post_remove - 卸载后运行的脚本,可以传递版本号为参数.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些函数运行的也是Bash脚本哦~&lt;/p&gt;
&lt;p&gt;然后在PKGBUILD中把 &lt;span class="tag"&gt;install&lt;/span&gt; 变量指向汝的 &lt;span class="tag"&gt;.install&lt;/span&gt; 文件的位置呗~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 一般来说,.install的文件名应该和软件包名一致.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;install&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'foo.install'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;需要用到配置文件?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果汝的软件包要有些用户编写的配置文件,记得添加到backups变量里.&lt;/p&gt;
&lt;p&gt;例如如果汝的配置文件是 &lt;span class="tag"&gt;/etc/foo&lt;/span&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;backup&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;etc/foo&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;记得是相对于 &lt;span class="tag"&gt;/&lt;/span&gt; 的路径.&lt;/p&gt;
&lt;p&gt;这样pacman就会在软件包升级时提醒用户合并新的和旧的文件,在卸载软件包时这些文件会被保留(除非用了 &lt;span class="tag"&gt;pacman -Rn&lt;/span&gt; )&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;依赖,依赖,依赖!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;重要的事情说三遍--&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;架构相关的变量可以通过下划线加架构的方式指定：depends_x86_64=(), optdepends_x86_64=().&lt;/p&gt;
&lt;p&gt;依赖相关的变量有这些:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;depends: &lt;strong&gt;真&lt;/strong&gt; 运行时依赖&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;运行时 &lt;strong&gt;必须&lt;/strong&gt; 的软件包列表,可以使用比较运算符来描述版本限制,如：depends=('foobar&amp;gt;=1.8.0').&lt;/p&gt;
&lt;p&gt;不过如果A依赖B,B又依赖C的话,A的depend里不用加上C😂😂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;optdepends:运行时的可选依赖&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一组不影响软件主要功能,但能提供额外特性的软件包.应该简要说明每个包所能提供的额外功能.有些可选依赖如果不安装,软件包的个别程序可能无法正常使用.&lt;/p&gt;
&lt;p&gt;optdepends可以这样写:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;optdepends&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s1"&gt;'foo: some description'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尽可能给每个可选依赖一个简洁的描述来方便用户决定装不装~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;makedepends:只在编译时需要的依赖&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仅在软件编译时需要的软件包列表.可以像depends序列里提到的一样指定最小版本依赖.&lt;/p&gt;
&lt;p&gt;不过不要包含 &lt;del&gt;base-devel&lt;/del&gt; 组的软件包! (要运行makepkg的话这个软件包组应该已经装上了)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;checkdepends:只在测试时需要的依赖&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;运行测试组件时需要,而运行时不需要的包列表.和makedepends一样,不要包含 &lt;del&gt;base-devel&lt;/del&gt; 组的软件包.&lt;/p&gt;
&lt;p&gt;只有编写了check()时再填这个变量哟~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;makedepends和checkdepends中的软件包会因为makepkg的 -r 选项而在安装完成后删除.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id25"&gt;散列值:安全第一&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;记得加上文件的散列值,makepkg会在编译前检查文件的散列值(和PKGBUILD中的散列值比较),一定程度上确保源代码不会篡改.&lt;/p&gt;
&lt;p&gt;写法大概像这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;这里是汝选择的散列算法&lt;span class="o"&gt;}=(&lt;/span&gt;&lt;span class="s1"&gt;'{散列值}'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;散列值的顺序取决于汝的sources变量,例如如果汝选择sha512sum的话:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;sha512sums&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"....."&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;建议使用sha256sums(或更高的位数),md5已经发现有 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MD5"&gt;碰撞漏洞&lt;/a&gt; ,sha1已经发现Preimage漏洞(已知校验和的情况下，可以生成一段字符串产生相同的校验和,)&lt;/p&gt;
&lt;p&gt;如果汝的源代码来自SCCS的话,因为文件在不断变化,所以需要让makepkg跳过散列值检查:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;sha512sums&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"SKIP"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;记得在修改某个文件以后用新的散列值这个变量呗~&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id26"&gt;测试,测试,再测试&lt;/a&gt;&lt;/h2&gt;
&lt;div class="tag info fg-white compound"&gt;
&lt;p&gt;&lt;del&gt;如果只是汝自己用的话，就不必做这个质量保证了，因为只有汝一个人需要忍受这些错误呗~.&lt;/del&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;运行下makepkg命令来确保没有问题。如果PKGBUILD没有错误，将会生成一个包，但是如果PKGBUILD被破坏或未完成，它会抛出一个错误。&lt;/p&gt;
&lt;p&gt;如果运行makepkg 成功，会生成一个名为$pkgname-$pkgver.pkg.tar.gz的新文件。
这个文件可以使用pacman -U 安装一下试试呗~,不过，一个包被构建并不代表你的工作就完成了！
只有当所有文件的结构都正确才能确保完成，例如前缀不对就不行。
可以使用pacman的查询功能显示软件包包含的文件及依赖的文件，然后将它于你认为正确的对比。"pacman -Qlp &amp;lt;package file&amp;gt;" 和"pacman -Qip &amp;lt;package file&amp;gt;" 可以完成这项工作。&lt;/p&gt;
&lt;p&gt;如果包看起来是正确的，那汝的工作就完成了。但是如果汝打算发布这个包或PKGBUILD，还是需要确认确认再确认包的依赖关系。&lt;/p&gt;
&lt;p&gt;同样要确保安装的软件确实很完美的运行！就算汝释放了一个包括所有必需文件的包，但是由于一些配置选项使它不能很好的工作，这真是让人恼火。&lt;/p&gt;
&lt;p&gt;可以用namcap帮助检查软件包的依赖是否正确:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 检查PKGBUILD文件&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;$ namcap PKGBUILD&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 检查某个软件包&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;$ namcap &amp;lt;package file name&amp;gt;.pkg.tar.xz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Namcap会帮汝干这些事:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;检查PKGBUILD文件里的一些常见错误&lt;/li&gt;
&lt;li&gt;用ldd扫描包中所有的ELF文件，自动报告缺失或可去除的依赖。&lt;/li&gt;
&lt;li&gt;启发式搜寻缺失或冗余的依赖。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;理想的情况是没有输出(真的么?),如果遇到了错误,去ArchWiki上查找对应的解决方案呗~: &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Namcap"&gt;https://wiki.archlinux.org/index.php/Namcap&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id27"&gt;生成源码包&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用下面的命令生成一个源码包:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;makepkg --source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这会在当前目录生成一个 &lt;span class="tag"&gt;.src.tar.gz&lt;/span&gt; 文件,汝可以在上传到AUR前先分享给其他人帮汝检查一下呗~&lt;/p&gt;
&lt;p&gt;到这里汝应该完成了一个软件包了呗~,下次咱会告诉汝怎么把汝创建的软件包提交到AUR上呗~&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Arch Linux"></category><category term="AUR"></category><category term="Guides"></category></entry><entry><title>AUR 纯萌新向入门教学(1)-从AUR安装软件包</title><link href="https://blog.yoitsu.moe/tech/aur_fresh_guidebook.html" rel="alternate"></link><updated>2016-02-01T00:00:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-01-29:tech/aur_fresh_guidebook.html</id><summary type="html">
&lt;p&gt;&lt;del&gt;没玩过AUR好意思说自己是Arch Linux用户？&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;尽管Arch Linux官方软件仓库里的软件包够多了,连MediaWiki或者OwnCloud一类的用 &lt;del&gt;最好的编程语言&lt;/del&gt; PHP写的应用都有对应的软件包啦~( &lt;del&gt;TU:反正闲着也没事干,打个包呗~&lt;/del&gt; ), 但是汝是不是有时试图pacman的时候:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;error: target not found: &lt;span class="o"&gt;{&lt;/span&gt; 此处用汝希望安装的软件包名称替换呗~ &lt;span class="o"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时咋办咧?就该AUR上场了呗~&lt;/p&gt;

&lt;div class="section" id="aur-arch-user-repository-arch"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;什么是AUR(Arch User Repository,Arch 用户软件仓库)?&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Arch用户软件仓库（Arch User Repository，AUR）是为用户而建、由用户主导的Arch软件仓库。AUR中的软件包以软件包生成脚本（PKGBUILD）的形式提供，用户自己通过makepkg生成包，再由pacman安装。创建AUR的初衷是方便用户维护和分享新软件包，并由官方定期从中挑选软件包进入community仓库。&lt;/p&gt;
&lt;p&gt;许多官方仓库软件包都来自AUR。通过AUR，大家相互分享新的软件包生成脚本（PKGBUILD和其他相关文件）。用户还可以为软件包投票。如果一个软件包投票足够多、没有协议问题、打包质量好，那么它就很有希望被收录进官方[community]仓库（以后就可以直接通过pacman 或 abs 安装了）。&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_User_Repository_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29"&gt;ArchWiki:Arch User Repository&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="aur"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;安装AUR里的软件包前要做好哪些准备咧?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;其实只有一项,安装 &lt;span class="tag"&gt;base-devel&lt;/span&gt; 软件包组,内含编译软件包所需要的工具.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S base-devel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于汝个人而言,需要 &lt;strong&gt;会使用&lt;/strong&gt; 终端和 &lt;strong&gt;看得懂bash脚本&lt;/strong&gt; (因为PKGBUILD其实就是bash脚本啦~,为了安全起见建议在安装时检查PKGBUILD呗~)&lt;/p&gt;
&lt;p&gt;下面是一句没啥用处的警告:&lt;/p&gt;
&lt;div class="tag warning fg-white compound"&gt;
&lt;p class="compound-first"&gt;AUR packages are user produced content. Any use of the provided files is at your own risk.&lt;/p&gt;
&lt;p class="compound-last"&gt;AUR中的软件包是由用户上传的,使用即表示汝愿意风险自担呗~&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pkgbuild"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;第一步:寻找和获得软件包的PKGBUILD文件&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这里是AUR的网址呗~: &lt;a class="reference external" href="https://aur.archlinux.org/"&gt;https://aur.archlinux.org/&lt;/a&gt; 打开后大概像这样:&lt;/p&gt;
&lt;img alt="AUR 首页" class="img-responsive" src="/images/aur_mainpage.png"/&gt;
&lt;p&gt;可以在另一侧的"English"那里的下拉菜单里将AUR web 界面的语言修改成中文呗~&lt;/p&gt;
&lt;div class="tag info fg-white compound"&gt;
&lt;p&gt;建议先 &lt;a class="alert-link reference external" href="https://aur.archlinux.org/register/"&gt;注册一个账户&lt;/a&gt; ,
这样便可以使用更多功能呗~&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;然后在搜索框里输入需要的软件包的名称就可以搜索呗~&lt;/p&gt;
&lt;img alt="在AUR里搜索软件包" class="img-responsive" src="/images/aur_search.png"/&gt;
&lt;p&gt;点击对应软件包的名称就可以进入软件包的详细信息呗~&lt;/p&gt;
&lt;img alt="软件包的详细信息" class="img-responsive" src="/images/aur_packageinfo.png"/&gt;
&lt;p&gt;点击右侧的"Download snapshot"就可以下载到软件包的快照.(比如pypi-pip.tar.gz)
一般包含PKGBUILD,有些软件包中可能包含其它文件(例如Systemd 单元啥的)
可以用tar来解开它呗~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 如果汝不知道tar 怎么用的话,man一下呗~ (man tar)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;tar xzf pypi-pip.tar.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;安装软件包&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先切换到软件包的目录，然后检查一下PKGBUILD：&lt;/p&gt;
&lt;!-- code-block::bash

# 用汝喜欢的编辑器替换$EDITOR呗~

$EDITOR PKGBUILD --&gt;
&lt;div class="tag warning fg-white compound"&gt;
&lt;p&gt;务必认真检查所有文件！
PKGBUILD和所有.install文件都是shell脚本文件，包含若干函数，由makepkg调用并执行。
这些函数可以调用任何命令，可能包含恶意或危险代码。
makepkg将通过fakeroot（意为“假root”）执行这些命令，能在一定程度防止恶意代码损坏系统，但还是小心为好。
如有疑问，可以到论坛或邮件列表询问。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在 &lt;ruby&gt;&lt;rb&gt;仔细&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;几乎没有&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 检查完所有文件以后,运行makepkg来创建并安装软件包呗~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 下面的三个选项分别是&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# (i) 在编译完成后安装,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# (s) 安装编译时需要的依赖关系,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# (r) 在安装完成后删除只在编译时需要的软件包&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 关于makepkg的更多帮助,可以查看手册页(man makepkg)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 或者在ArchWiki上查阅呗~&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;makepkg -rsi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过经常会出现这样的状况:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在创建软件包：pypy-pip 8.0.2-1 &lt;span class="o"&gt;(&lt;/span&gt;2016年 01月 30日 星期六 15:18:38 CST&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在检查运行时依赖关系...&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在检查编译时依赖关系&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在安装缺少的依赖关系...&lt;/span&gt;
&lt;span class="code-line"&gt;错误：未找到目标：pypy-setuptools&lt;/span&gt;
&lt;span class="code-line"&gt;错误：未找到目标：pypy3-setuptools&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 错误： &lt;span class="s1"&gt;'pacman'&lt;/span&gt; 无法安装缺少的依赖关系。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这表示这个软件包依赖的某些包也在AUR里,汝只好先把它们装上呗~,或者用个AUR Helper(一会儿咱会介绍一个AUR Helper)&lt;/p&gt;
&lt;p&gt;在安装完需要的依赖以后再运行下makepkg,大概像这样~:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在创建软件包：pypy-pip 8.0.2-1 &lt;span class="o"&gt;(&lt;/span&gt;2016年 01月 30日 星期六 15:27:02 CST&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在检查运行时依赖关系...&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在检查编译时依赖关系&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 获取源代码......&lt;/span&gt;
&lt;span class="code-line"&gt;    -&amp;gt; 正在下载 pip-8.0.2.tar.gz...&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在验证源代码文件 sha256sums...&lt;/span&gt;
&lt;span class="code-line"&gt;    pip-8.0.2.tar.gz ... 通过&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在释放源码......&lt;/span&gt;
&lt;span class="code-line"&gt;    -&amp;gt; 正在解压缩 pip-8.0.2.tar.gz，使用 &lt;span class="nv"&gt;bsdtar&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在进入 fakeroot 环境...&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在开始 package_pypy-pip&lt;span class="o"&gt;()&lt;/span&gt;...&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;# 省掉编译的过程.....&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在清理安装...&lt;/span&gt;
&lt;span class="code-line"&gt;  -&amp;gt; 正在清除不打算要的文件...&lt;/span&gt;
&lt;span class="code-line"&gt;  -&amp;gt; 正在删除 libtool 文件...&lt;/span&gt;
&lt;span class="code-line"&gt;  -&amp;gt; 正在移除静态库文件……&lt;/span&gt;
&lt;span class="code-line"&gt;  -&amp;gt; 正在压缩 man 及 info 文档...&lt;/span&gt;
&lt;span class="code-line"&gt;  -&amp;gt; 正在从二进制文件和库中清除不需要的系统符号...&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在创建软件包&lt;span class="s2"&gt;"pypy-pip"&lt;/span&gt;......&lt;/span&gt;
&lt;span class="code-line"&gt;  -&amp;gt; 正在生成 .PKGINFO 文件...&lt;/span&gt;
&lt;span class="code-line"&gt;  -&amp;gt; 正在生成 .MTREE 文件......&lt;/span&gt;
&lt;span class="code-line"&gt;  -&amp;gt; 正在压缩软件包...&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在离开 fakeroot 环境。&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 完成创建：pypy-pip 8.0.2-1 &lt;span class="o"&gt;(&lt;/span&gt;2016年 01月 30日 星期六 15:27:40 CST&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; 正在安装 pypy-pip 软件包组，使用 pacman -U...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果汝有sudo的能力的话,接下来输入密码,然后像原来一样安装软件包呗~&lt;/p&gt;
&lt;p&gt;是不是感觉自己处理依赖关系和一遍遍的makepkg已经让汝开始挠头了么,接着往下看.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aur-helper"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;使用AUR helper简化安装过程&lt;/a&gt;&lt;/h2&gt;
&lt;div class="tag warning fg-white compound"&gt;
&lt;p&gt;Arch官方永远不会提供安装AUR（和其他不受支持）软件包的便利工具，&lt;strong&gt;AUR用户应当对软件编译有一定了解。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;然而官方不做并不代表没有😂😂,有一个叫做yaourt的工具在Archer间口口相传.yaourt就是一个AUR helper.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://aur.archlinux.org/packages/yaourt/"&gt;yaourt on AUR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先用上面的方法安装好yaourt,然后像用pacman一样运行yaourt就好(除了不要以root用户运行)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;yaourt -S foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;yaourt会帮汝下载PKGBUILD,安装需要的依赖,运行makepkg等一系列操作哟~&lt;/p&gt;
&lt;div class="tag warning fg-white compound"&gt;
&lt;p&gt;2月1号Pacman更新到了5.0，和yaourt的兼容性还不明确……&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;登录到AUR以后可以进行的操作&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;登录到AUR以后,软件包描述页面右侧的"软件包操作"的若干命令就可以使用了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;将这个包标记为过期&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果汝发现上游更新了而AUR没更新的话,可以通过这样提醒维护者更新,长时间无人维护的软件包可能被删除.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;为这个软件包投票&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;觉得Ta好就给投一票呗~,票数多而且符合
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_packaging_standards"&gt;Arch Linux 软件包规范&lt;/a&gt;
的软件包可能会被TU收录到官方软件仓库诶~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;当有新评论的时候提醒我&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;评论可以用来回报软件包的问题或是改进建议等等,如果这个选项启用的话,当评论更新时汝就会收到通知呗~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;提交请求&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以提交像是合并,更名或是移除软件包的请求.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;诶好像有些长了呐~,所以下一次咱再说如何创建软件包并提交到AUR上呗~&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Arch Linux"></category><category term="AUR"></category><category term="Guides"></category></entry><entry><title>Arch Linux 中文社区非官方生存手册</title><link href="https://blog.yoitsu.moe/life/archlinux_cn_community_unoffical_newbie_guide.html" rel="alternate"></link><updated>2016-01-28T00:00:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-01-28:life/archlinux_cn_community_unoffical_newbie_guide.html</id><summary type="html">
&lt;p&gt;汝要入坑Arch Linux了吗?那还不赶紧加入Arch Linux中文社区~&lt;/p&gt;

&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;什么是Arch Linux?&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Arch Linux 是一个针对 i686/x86-64 平台独立开发的 GNU/Linux 发行版，遵循轻量、简洁、优雅的开发原则，借灵活的架构应用于各种环境。Arch 安装后只提供最基本的系统，用户可以根据自己的需求来搭建不同的系统环境。官方并不提供图形化的配置工具，多数系统配置是通过修改文本文件来进行的。Arch 尽力提供最新稳定版本的软件。&lt;/p&gt;
&lt;p&gt;Arch Linux 使用 Pacman 作为包管理器，它在提供了一个简单的包管理器同时，也提供了一个易用的包构建系统，使用户能够轻松地管理和定制官方提供的、用户自己制作的、甚至是来自第三方的各种软件包。仓库系统也能够让用户轻松的构建和维护自己的编译脚本、软件包和仓库，这样将有助于社区的成长和建设。&lt;/p&gt;
&lt;p&gt;Arch Linux 的基本安装包由 [core] 软件库提供。此外 [extra], [community] 和 [testing] 软件库则提供了大量的的高品质软件以满足你的需求。Arch Linux 同时也通过 Arch 用户软件仓库(AUR)提供了 [unsupported] 软件库，里面有大量的编译脚本，用户可以通过 &lt;cite&gt;makepkg&lt;/cite&gt; 工具轻松地从源码中编译软件。&lt;/p&gt;
&lt;p&gt;Arch Linux 采用“滚动升级”策略，这样可以实现“一次安装，永久更新”。升级到下一个“版本”的 Arch Linux 几乎不需要重新安装系统，只需一行命令，你就能轻松的享受到最新的 Arch Linux。&lt;/p&gt;
&lt;p&gt;Arch Linux 努力和上游软件源码保持一致，只有使程序能够在 Arch Linux 正常编译运行的补丁才会被加入更新中。&lt;/p&gt;
&lt;p&gt;总之， Arch Linux 是一个灵活、简洁的、满足有一定经验的 Linux® 用户的需求的发行版。它强大且易于管理的特性，使其成为可以完美胜任服务器和工作站的发行版。它可以变成任何你想要的样子。如果你也认为这是一个 GNU/Linux 发行版该做的，欢迎你来自由使用并参与其中，为社区做出贡献，欢迎来到 Arch Linux！&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://www.archlinuxcn.org/about/"&gt;Arch Linux 中文社区&lt;/a&gt; ,翻译自 &lt;a class="reference external" href="https://www.archlinux.org/about/"&gt;Archlinux.org&lt;/a&gt; .&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;先把Arch Linux装上先~&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ArchWiki的文档应该算比较详细的啦~&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;第一次安装Arch Linux的新手建议看看 &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Beginners'_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29"&gt;Beginners' guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;有经验的用户可以看看 &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Installation_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29"&gt;Installation guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;想找交互式的安装程序? 可以试试 &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Archboot"&gt;ArchBoot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;加入Arch Linux中文社区论坛呗~&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;用Arch Linux时发现了些问题?英文水平不足担心发到 &lt;a class="reference external" href="https://bbs.archlinux.org"&gt;官方论坛&lt;/a&gt; 泥牛入海? 来中文论坛呗~&lt;/p&gt;
&lt;p&gt;中文论坛在这~: &lt;a class="reference external" href="https://bbs.archlinuxcn.org/"&gt;https://bbs.archlinuxcn.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;和参加其他的论坛讨论一样,先读读 &lt;a class="reference external" href="/links.html#phoenixlzx"&gt;phoenixlzx&lt;/a&gt; 写的 &lt;a class="reference external" href="https://bbs.archlinuxcn.org/viewtopic.php?id=1072"&gt;Arch Linux 中文社区 新手生存指南&lt;/a&gt; , &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Forum_etiquette_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29"&gt;官方编写的论坛礼仪指南&lt;/a&gt; 也可以作为参考呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;加入中文社区的聊天频道呗~&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;和论坛相比,中文社区聊天频道更 &lt;ruby&gt;&lt;rb&gt;活跃&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;洪水&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 呗~&lt;/p&gt;
&lt;p&gt;在多才多艺的百合仙子 &lt;a class="reference external" href="/links.html#lilydjwg"&gt;lilydjwg&lt;/a&gt; , Tox传教士 &lt;a class="reference external" href="/links.html#quininer"&gt;quininer&lt;/a&gt; ,和 PhD &lt;a class="reference external" href="/links.html#farseerfc"&gt;farseerfc&lt;/a&gt; 的协力下,社区交流群实现了irc+Telegram+xmpp+Tox的多通道联通,撒花~&lt;/p&gt;
&lt;div class="section" id="irc"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;加入irc频道&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Web界面在这: &lt;a class="reference external" href="//webchat.freenode.net/?channels=archlinux-cn"&gt;#archlinux-cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果汝使用irc客户端的话:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;irc服务器: &lt;span class="tag"&gt;irc.freenode.net&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;端口: &lt;span class="tag"&gt;7000&lt;/span&gt; (SSL) / &lt;span class="tag"&gt;6667&lt;/span&gt; (Plain)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="xmpp"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;通过XMPP加入&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用XMPP帐号添加 &lt;span class="tag"&gt;talk@archlinuxcn.org&lt;/span&gt; 为好友即可加入。成功加入将收到欢迎信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tox"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;通过Tox加入&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;添加下面那个Tox ID为好友,然后按照它的提示操作呗~&lt;/p&gt;
&lt;blockquote&gt;
34922396155AA49CE6845A2FE34A73208F6FCD
6190D981B1DBBC816326F26C6CDF3581F697E7&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="telegram"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;通过Telegram加入&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;hmmm.....为保护群组不被外星人攻击，所以这里就不贴上链接啦~&lt;/p&gt;
&lt;p&gt;汝可以通过其它方法加入,贴上汝在Telegram的用户名呗~(其它已经在群里的用户会帮汝拉进来......)&lt;/p&gt;
&lt;p&gt;或者,在Telegram上添加@Jqs7Bot这个机器人,通过群组查询中的Linux分类找到#archlinux-cn(irc)的链接再加入呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;群内的一般原则&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;del&gt;要优雅,不要污~&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;(irc/xmpp/tox) 推荐一个由百合仙子帮忙的图床 &lt;a class="reference external" href="https://img.vim-cn.com/"&gt;https://img.vim-cn.com/&lt;/a&gt; 呗~&lt;/li&gt;
&lt;li&gt;(Telegram) 发没压缩的图片和声音的话irc可是收不到的哟~&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;如果汝的英语水平也不错的话......&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果汝的英语水平不错的话，太棒啦~,社区正需要汝这样的人呐~&lt;/p&gt;
&lt;p&gt;汝可以......&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;帮助翻译ArchWiki,可以在 &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/ArchWiki_Translation_Team_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29"&gt;ArchWiki上翻到相应页面呗~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;创建软件包并提交到 &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_User_Repository"&gt;AUR(Arch Linux User Repository)&lt;/a&gt; ,高质量的软件包可能会被TU(授信用户)收录到官方软件仓库呗~&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Getting_involved"&gt;参与开发&lt;/a&gt; , &lt;del&gt;然后成为下一个像felixonmars一样的领袖😂😂😂&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Arch Linux"></category><category term="中文社区"></category></entry><entry><title>Tox新手入门</title><link href="https://blog.yoitsu.moe/tech/tox_trainee_guide.html" rel="alternate"></link><updated>2016-01-21T00:00:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-01-21:tech/tox_trainee_guide.html</id><summary type="html">
&lt;p&gt;Tox,一种新型的聊天协议.如果汝关注安全和隐私,不妨来看看呗~&lt;/p&gt;

&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;再说一遍Tox是啥?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tox是一种新型的通讯协议,它的目标是——提供一个无法监控的 Skype 替代品——彻底的加密，没有后门，无需中间服务器。&lt;/p&gt;
&lt;p&gt;由于Tox就是一个协议框架,不同的开发者开发了不同的软件呗~&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://wiki.tox.chat/clients"&gt;Tox 官方维护的wiki上可以找到不同平台可用的客户端列表呐&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在下面的例子中咱会先拿 &lt;a class="reference external" href="https://github.com/tux3/qTox"&gt;qtox&lt;/a&gt; 来示范一下,汝可以从上面的列表中选择一个适合自己的客户端呗~&lt;/p&gt;
&lt;p&gt;首先按照上游的指南装好客户端呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;新建一个Tox个人资料&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;运行qtox,会弹出这样的窗口:&lt;/p&gt;
&lt;img alt="qTox欢迎画面" class="img-responsive" src="/images/qtox_welcome.png"/&gt;
&lt;p&gt;因为咱已经有一个Tox Profile所以是这样啦,汝直接按"New Profile"就好:&lt;/p&gt;
&lt;img alt="qTox-新建个人资料" class="img-responsive" src="/images/qtox_addprofile.png"/&gt;
&lt;p&gt;在Username那挑个用户名,Password那输入个密码呗~&lt;/p&gt;
&lt;div class="tag info fg-white compound"&gt;
&lt;p&gt;如果用SSH远程访问做类比的话,汝的Profile就是私钥,密码就是私钥的保护口令呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="tag warning fg-white compound"&gt;
&lt;p class="compound-first"&gt;汝输入的密码非常重要!&lt;/p&gt;
&lt;p class="compound-middle"&gt;1.挑一个好的密码,如果不怀好意的骇客同时得到了汝的密码和profile,就可以冒充汝发送消息了诶.&lt;/p&gt;
&lt;p class="compound-last"&gt;2,记住汝的密码!虽然安全性很重要,但是一旦汝忘了密码,基本上就无法恢复了呗~&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;确认完毕之后就会进入到qtox的主画面了呗~(旁边一圈是咱加上的注释,原谅咱不怎么会用GIMP......)&lt;/p&gt;
&lt;img alt="qTox_main" class="img-responsive" src="/images/qtox_main.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;修改个人资料&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;点击头像的区域就可以修改自己的个人资料了呗~&lt;/p&gt;
&lt;img alt="qTox_profile" class="img-responsive" src="/images/qtox_profile.png"/&gt;
&lt;div class="tag info fg-white compound"&gt;
&lt;p&gt;就像界面介绍的那样,Name和Status是公开的信息,所以仔细考虑一下选择一个合适的呗~&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;不过问题来啦,木有好友咧?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;添加好友&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要添加好友的话,先让汝的好友把Ta的Tox ID用其他的手段让汝知道呗~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;E1F1C7DEA73D8126A1DEE9EAE5B45E21FB17E75F2319B7823A346B8C427EB272C80A89B69B4E&lt;/p&gt;
&lt;p class="attribution"&gt;—Tox ID 是像这样的十六进制数呗~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后到添加好友的界面把Tox ID输入进去.必要的话,附上一段消息让Ta知道汝是谁呗~&lt;/p&gt;
&lt;img alt="qtox_addfriend" class="img-responsive" src="/images/qtox_addfriend.png"/&gt;
&lt;p&gt;一开始时汝的好友列表只会显示对方的Tox ID呐,像这样:&lt;/p&gt;
&lt;img alt="qtox_addfriend_Pending" class="img-responsive" src="/images/qtox_addfriend2.png"/&gt;
&lt;p&gt;当Ta同意汝的好友请求以后,汝的好友列表上就会显示Ta的Name和Status呗~&lt;/p&gt;
&lt;img alt="qtox_addfriend_success" class="img-responsive" src="/images/qtox_addfriend3.png"/&gt;
&lt;p&gt;然后像平常一样聊天呗~&lt;/p&gt;
&lt;div class="tag info fg-white compound"&gt;
&lt;p&gt;要想让其他人和汝成为好友的话,把汝自己的Tox ID告诉Ta,让Ta像这样添加汝为好友呗~&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;发起群聊&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tox也是可以发起群聊的哟~首先创建一个(qtox里点击下方"创建群聊"按钮就可以了诶~)&lt;/p&gt;
&lt;img alt="qtox_groupchat" class="img-responsive" src="/images/qtox_groupchat.png"/&gt;
&lt;p&gt;汝也可以邀请好友加入群聊呗~(qtox中右键点击某个好友-邀请加入群聊-汝的群聊名称呗~)&lt;/p&gt;
&lt;p&gt;只不过万一汝退出了tox,下次登录时是不会加入上次加入的群聊的,汝只好让好友再邀请汝一次呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;导出Tox的配置文件&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;必要时可以导出汝的配置文件,这样就可以在其他地方连接到汝的Tox用户了呗~&lt;/p&gt;
&lt;p&gt;qtox的话,可以在Profiles页面通过"导出"选项导出汝的配置文件呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;最后&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这些就是tox基本的用法啦~,对于其他的客户端的话,不妨去阅读对应的文档呗~&lt;/p&gt;
&lt;p&gt;如果汝有意帮助开发Tox的话, &lt;a class="reference external" href="https://wiki.tox.chat/users/contributing"&gt;来这看看呗~&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;哦,差点忘记啦,这是咱的Tox ID,大家可以试试看呗~&lt;/p&gt;
&lt;blockquote&gt;
7BC803F7F9B8A7230EE181AB45CA909DE446D36A7BC3A275D5576439E0CF7546FF4E2C4665CC&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="notes"></category><category term="software"></category></entry><entry><title>新约伊兹的萌狼乡手札诞生全过程伪实录</title><link href="https://blog.yoitsu.moe/tech/new_yoitsu_birth_notes.html" rel="alternate"></link><updated>2016-01-18T09:35:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-01-18:tech/new_yoitsu_birth_notes.html</id><summary type="html">
&lt;p&gt;说好的下一期来啦~,新的"约伊兹的萌狼乡手札"是怎么样诞生呐~马上就告诉汝呗~&lt;/p&gt;

&lt;div class="section" id="pelican"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;安装Pelican然后进行初始设置&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在咱写这篇文章时, &lt;a class="reference external" href="/links.html#farsserfc"&gt;farsserfc&lt;/a&gt; 已经把Pelican打好包放进Arch Linux 官方软件仓库啦好棒~&lt;/p&gt;
&lt;p&gt;Arch Linux用户可以这样安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其它操作系统可以通过pip安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着运行设置程序建立一个工作文件夹:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着开始挖坑呗~,用 &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; 或 &lt;a class="reference external" href="http://wowubuntu.com/markdown/"&gt;Markdown&lt;/a&gt; 开始写文章然后放到 &lt;span class="tag"&gt;contents&lt;/span&gt; 文件夹里,像这样:&lt;/p&gt;
&lt;p&gt;(reStructuredText)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;这里是标题&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gh"&gt;===========================================&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;:lang:&lt;/span&gt; &lt;span class="nf"&gt;这里填语言&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;写文章的日期&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nc"&gt;:Category:&lt;/span&gt; &lt;span class="nf"&gt;分类&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;这里是内容&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Markdown)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;Title: 这里是标题&lt;/span&gt;
&lt;span class="code-line"&gt;date: 写文章的日期&lt;/span&gt;
&lt;span class="code-line"&gt;Category: 分类&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;这里是内容&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后运行一个命令来测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;make html &lt;span class="c1"&gt;# 生成html&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;make serve &lt;span class="c1"&gt;# 在127.0.0.1:8000 运行一个测试服务器.&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后打开浏览器输入 &lt;span class="tag"&gt;localhost:8000&lt;/span&gt; ，你就能看到一个初生的很 &lt;ruby&gt;&lt;rb&gt;简洁&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;难看&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 的博客了，不过不要担心，它是只丑小鸭，很快就会像天鹅般美丽(真的么?)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ruby-rb-rb-rp-rp-rt-rt-rp-rp-ruby-pelican"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;&lt;ruby&gt;&lt;rb&gt;修改&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;调教&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; Pelican的主题&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可能是一时抽风没找到合适的Material Design风格的框架，&lt;del&gt;于是走上了Metro UI CSS的不归路......&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Metro UI CSS的项目主页在这里 &lt;a class="reference external" href="http://metroui.org.ua"&gt;http://metroui.org.ua&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;咱拿了pelican内置的simple主题做起步,把Metro UI CSS文件夹里的 &lt;span class="tag"&gt;/css&lt;/span&gt; 和 &lt;span class="tag"&gt;/js&lt;/span&gt; 复制到主题的 &lt;span class="tag"&gt;/statics&lt;/span&gt; 文件夹里.&lt;/p&gt;
&lt;p&gt;现在的文件夹结构大概像这样:&lt;/p&gt;
&lt;pre&gt;&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span style="color:blue;font-weight:bold;"&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:blue;font-weight:bold;"&gt;cache&lt;/span&gt;             生成頁面的 pickle 緩存&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:blue;font-weight:bold;"&gt;content&lt;/span&gt;           讀取的全部內容&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;&amp;lt;categories&amp;gt;&lt;/span&gt;      按分類存放的文章&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;pages&lt;/span&gt;             像 About 這樣的固定頁面&lt;/span&gt;
&lt;span class="code-line"&gt;│   └── &lt;span style="color:blue;font-weight:bold;"&gt;static&lt;/span&gt;            文章內用到的靜態內容&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:blue;font-weight:bold;"&gt;drafts&lt;/span&gt;            文章的草稿箱&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:green;font-weight:bold;"&gt;Makefile&lt;/span&gt;          生成用的 makefile&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:green;font-weight:bold;"&gt;pelicanconf.py&lt;/span&gt;    測試時用的快速 Pelican 配置&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:green;font-weight:bold;"&gt;publishconf.py&lt;/span&gt;    部署時用的耗時 Pelican 配置&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:teal;font-weight:bold;"&gt;output&lt;/span&gt;          -&amp;gt; &lt;span style="color:blue;font-weight:bold;"&gt;../kenookamihoro.github.io&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:teal;font-weight:bold;"&gt;plugins&lt;/span&gt;         -&amp;gt; &lt;span style="color:blue;font-weight:bold;"&gt;../plugins&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;└── &lt;span style="color:teal;font-weight:bold;"&gt;theme&lt;/span&gt;           -&amp;gt; &lt;span style="color:blue;font-weight:bold;"&gt;../yoitsu&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;然后这个内容 repo 中的三个符号链接分别指向三个子 repo（为啥没用 &lt;span class="tag"&gt;git submodule&lt;/span&gt; ? 因为咱技术不精还不会用......）。
theme 指向 &lt;a class="reference external" href="https://github.com/KenOokamiHoro/yoitsu"&gt;yoitsu&lt;/a&gt; ，是咱修改过的 pelican 主题啦。
plugins 指向 &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;pelican-plugins&lt;/a&gt;
最后 output 指向 &lt;a class="reference external" href="https://github.com/KenOokamiHoro/kenookamihoro.github.io"&gt;kenookamihoro.github.io&lt;/a&gt; 也就是发布的静态网站啦。&lt;/p&gt;
&lt;p&gt;而主题文件夹的结构大概像这样：&lt;/p&gt;
&lt;pre&gt;&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span style="color:blue;font-weight:bold;"&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:blue;font-weight:bold;"&gt;static&lt;/span&gt;         主题中用到的静态文件，例如js和css&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:blue;font-weight:bold;"&gt;templates&lt;/span&gt;      供jinja使用的模板页面&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;archives.html&lt;/span&gt;     文章归档&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;article.html&lt;/span&gt;      每个文章&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;author.html&lt;/span&gt;       作者&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;base.html&lt;/span&gt;         所有模板的基础&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;category.html&lt;/span&gt;     分类&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;index.html&lt;/span&gt;        首页&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;page.html&lt;/span&gt;         每个页面&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;pageination.html&lt;/span&gt;  分页&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;search.html&lt;/span&gt;       搜索&lt;/span&gt;
&lt;span class="code-line"&gt;│   └── &lt;span style="color:blue;font-weight:bold;"&gt;tag.html&lt;/span&gt;          标签&lt;/span&gt;
&lt;span class="code-line"&gt;└──&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;然后记得修改pelican.conf告诉Pelican那些页面是模板那些页面是直接生成的呐~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# DIRECT_TEMPLATES 告诉Pelican哪些页面是直接用来生成特定页面的......&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;DIRECT_TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'archives'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'search'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来开始调教主题呗~,直接给出官方的教程呗~ &lt;a class="reference external" href="http://docs.getpelican.com/en/3.6.3/themes.html"&gt;Pelican doc:Creating Themes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;经过一番 &lt;ruby&gt;&lt;rb&gt;仔细&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;无脑&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 调教以后,就成了汝等现在看到的样子了呐~&lt;/p&gt;
&lt;p&gt;PS:咱自己做的这套主题还木有到能拿来复用的程度(原因主要是咱有很多是直接写死在主题里的设置),所以这又是一个坑呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;装插件&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作为一套博客系统,Pelican自然有很多的插件可以安装呐~,不信的话去看看`pelican-plugins里有多少插件呗~ &amp;lt;&lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;https://github.com/getpelican/pelican-plugins&lt;/a&gt;&amp;gt;`_&lt;/p&gt;
&lt;p&gt;咱启用的插件有这些:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"better_codeblock_line_numbering"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'tipue_search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'neighbors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'series'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s2"&gt;"render_math"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'extract_toc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'tag_cloud'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'sitemap'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'summary'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'bootstrapify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'twitter_bootstrap_rst_directives'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体的设置流程嘛,请允许咱引用一下 &lt;a class="reference external" href="http://farseerfc.me/redesign-pelican-theme.html#pelican-restructuredtext"&gt;farseerfc.me:重新設計了 Pelican 的主題與插件&lt;/a&gt; 呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;实现动态格言&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;动态格言的实现来自 &lt;a class="reference external" href="/links.html#fiveyellowmice"&gt;fiveyellowmice&lt;/a&gt; 啦~(咱不是JavaScript专家呐~,就不谈具体的实现了呗~)&lt;/p&gt;
&lt;p&gt;首先是一段修改某一个元素的类的JavaScript(当然还需要 &lt;a class="reference external" href="http://julian.com/research/velocity/"&gt;velocity&lt;/a&gt; ):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/theme/js/velocity.min.js"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"DOMContentLoaded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".menu-button"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"touchstart"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".menu-wrapper"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;removeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"trigger"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".nav-items"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;":visible"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                     &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".nav-items"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"finish"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"slideUp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;easing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"easeInQuad"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fadeOut"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;easing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"easeInQuad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;             &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                     &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".nav-items"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"finish"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"slideDown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;easing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"easeOutQuad"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fadeIn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;easing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"easeOutQuad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;             &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   &lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后新建一个 Github gist 填上动态格言,像这样(大括号里的内容可以添加多个):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"example"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nt"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"someone"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再写个JavaScript来从JSON中提取格言然后填到html里:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"DOMContentLoaded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".site-description"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;blockquote&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"fortune"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".site-description"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;blockquote&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"fortune"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"line-height"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"1.4rem"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"https://api.github.com/gists/07ca2edea6e507bf40f5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                            &lt;span class="nx"&gt;fortunes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"quotes.json"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                            &lt;span class="nx"&gt;randomFortune&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fortunes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;fortunes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;randomFortune&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#fortune"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;p&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;randomFortune&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/p&amp;gt;"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                                    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#fortune"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;p&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;randomFortune&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/p&amp;gt;"&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;small&amp;gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randomFortune&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;/small&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                            &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#fortune"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"slideDown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;easing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"easeOutQuad"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                    &lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;            &lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后的效果汝也应该看到了呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;发布&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过几条命令可以发布~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;make publish&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后用git提交到Github就好......&lt;/p&gt;
&lt;p&gt;好吧这就是咱的全过程啦(雾)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="yoitsu"></category><category term="pelican"></category><category term="blog"></category><category term="python"></category></entry><entry><title>为MediaWiki安装可视化编辑器</title><link href="https://blog.yoitsu.moe/tech/visualeditor_for_mediawiki.html" rel="alternate"></link><updated>2016-01-17T09:35:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-01-17:tech/visualeditor_for_mediawiki.html</id><summary type="html">
&lt;p&gt;为MediaWiki安装来自 &lt;a class="reference external" href="https://www.mediawiki.org/wiki/VisualEditor"&gt;维基媒体基金会&lt;/a&gt; 的 &lt;a class="reference external" href="https://www.mediawiki.org/wiki/VisualEditor"&gt;可视化编辑器&lt;/a&gt; .&lt;/p&gt;

&lt;div class="section" id="hold"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;连维基百科都要Hold不住啦~&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;许多新用户不会着手大幅度修改，而只是做些细节调整，不过仅仅阅读源代码就必须学标记语言了。当我们的用户在演示操作时，这把他们吓走了。&lt;/p&gt;
&lt;p&gt;早在 2004 年，社群开始一再认识到必须采用更好的编辑方式。因为人们的请求，更重要的是他们的需要，所以我们开发了可视化编辑器。&lt;/p&gt;
&lt;p&gt;Wiki 标记语言让新人害怕，这种程度会随着其他站点的迁离而加剧。如果我们不开发可视化编辑器，那么图表的走势会在接下来五年中变得更加糟糕。&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="https://www.mediawiki.org/wiki/VisualEditor/Portal/Why/zh"&gt;MediaWiki.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以他们才 &lt;del&gt;痛定思痛&lt;/del&gt; 决定开发可视化编辑器么😂&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;开始之前-检查一下要求&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可视化编辑器(下面就说VisualEditor呗~)还需要一个叫
&lt;a class="reference external" href="https://www.mediawiki.org/wiki/VisualEditor/Portal/Why/zh"&gt;Parsoid&lt;/a&gt;
的程序来承担把wiki标记转化成html的任务啦(看下图)~,所以需要服务器来运行它呐~&lt;/p&gt;
&lt;img alt="Parsoid的工作原理" class="img-responsive" src="/images/Parsoid_HTML-RDFa_content_model.svg.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="parsoid-ubuntu-14-debian-7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;安装Parsoid(Ubuntu 14+ / Debian 7+ )&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上游的指南在这(好好学英语呗~) &lt;a class="reference external" href="https://www.mediawiki.org/wiki/Parsoid/Setup"&gt;https://www.mediawiki.org/wiki/Parsoid/Setup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu和Debian系统的话直接添加MediaWiki.org的软件源然后通过apt安装就好了啦~&lt;/p&gt;
&lt;p&gt;首先添加MediaWiki.org的GPG公钥:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo apt-key advanced --keyserver keys.gnupg.net --recv-keys 664C383A3566A3481B942F007A322AC6E84AFDD2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后添加Parsoid源:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"deb https://releases.wikimedia.org/debian jessie-mediawiki main"&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/parsoid.list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装需要的软件包:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install curl parsoid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后看下下面一节的内容修改一下配置文件呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;其它系统?手动安装呗~&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上游的指南在这(还是要好好学英语呗~) &lt;a class="reference external" href="https://www.mediawiki.org/wiki/Parsoid/Developer_Setup"&gt;https://www.mediawiki.org/wiki/Parsoid/Developer_Setup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先汝要装上Nodejs(&amp;gt;0.8,建议0.10或更新的版本呐~),还有git.
具体的安装方法为了避免降低正交性 &lt;del&gt;(其实是系统太多不好写......)&lt;/del&gt;,就麻烦汝自己去找了呐~&lt;/p&gt;
&lt;blockquote&gt;
「呵。咱是贤狼，不是神呐。如果汝开始会期待起咱能够泄露天机给汝，那咱就得从汝眼前消失了呗。」&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;node --version &lt;span class="c1"&gt;# 如果是Debian或Ubuntu ,输入 nodejs --version&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后用git克隆版本库呗~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;git clone https://gerrit.wikimedia.org/r/p/mediawiki/services/parsoid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用npm安装上相应的依赖:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;npm install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后看下面一节的内容修改一下配置文件呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;修改配置文件&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如果是通过软件源安装的,配置文件位于 &lt;span class="tag"&gt;/etc/mediawiki/parsoid/settings.js&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果是通过git下载的,从parsoid目录中先复制一份样例出来呗~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;cp localsettings.js.example localsettings.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开配置文件,找到这一段内容,然后改它~:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;parsoidConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMwApi&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// The "prefix" is the name given to this wiki configuration in the&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// (deprecated) Parsoid v1 API.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// optional&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// The "domain" is used for communication with Visual Editor&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// and RESTBase.  It defaults to the hostname portion of&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// the `uri` property below, but you can manually set it&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// to an arbitrary string.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// optional&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// This is the only required parameter:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;// the URL of you MediaWiki API endpoint.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost/w/api.php'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中"uri"对应汝的wiki的api.php的位置,"domain"是汝的域名啦~."prefix"可以自己起一个(反正因为换了API也没用啦~,不过测试时可能用得到)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;启动服务&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;从软件源安装的?&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl start parsoid &lt;span class="c1"&gt;# Debian Jessie ,用Systemd启动&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;sudo service parsoid start &lt;span class="c1"&gt;# Debian Wheezy 或Ubuntu ,用init.d脚本启动.&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果汝不是通过远程访问执行的命令,可以在浏览器上打开 &lt;span class="tag"&gt;http://localhost:8142&lt;/span&gt; 来进行测试.试着加载 &lt;span class="tag"&gt;http://localhost:8142/汝设置的前缀/汝的wiki上的一个页面&lt;/span&gt; 试试呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="git"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;用git安装的?&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;npm start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;node bin/server.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以用screen一类的工具让Parsoid在后台运行~&lt;/p&gt;
&lt;p&gt;如果汝不是通过远程访问执行的命令,可以在浏览器上打开 &lt;span class="tag"&gt;http://localhost:8000&lt;/span&gt; 来进行测试.试着加载 &lt;span class="tag"&gt;http://localhost:8000/汝设置的前缀/汝的wiki上的一个页面&lt;/span&gt; 试试呗~&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;修改监听地址便于远程测试&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;改这一段:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Allow override of port/interface:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;//parsoidConfig.serverPort = 8142;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;//parsoidConfig.serverInterface = '127.0.0.1';&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;反注释最后一行并改成0.0.0.0,就可以通过 &lt;span class="tag"&gt;http://服务器的IP地址:8142&lt;/span&gt; 访问啦~&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="visualeditor"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;安装VisualEditor扩展&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上游的指南在这: &lt;a class="reference external" href="https://www.mediawiki.org/wiki/Extension:VisualEditor"&gt;https://www.mediawiki.org/wiki/Extension:VisualEditor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先从 &lt;a class="reference external" href="https://www.mediawiki.org/wiki/Special:ExtensionDistributor/VisualEditor"&gt;这里&lt;/a&gt; 获得扩展然后上传到汝的wiki上的extensions目录呗~&lt;/p&gt;
&lt;p&gt;然后修改汝的LocalSettings.php:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;require_once "$IP/extensions/VisualEditor/VisualEditor.php";&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// 反注释下一行来默认启用可视化编辑器&lt;/span&gt;
&lt;span class="code-line"&gt;#$wgDefaultUserOptions['visualeditor-enable'] = 1;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;// 反注释下一行来启用测试中的功能&lt;/span&gt;
&lt;span class="code-line"&gt;#$wgDefaultUserOptions['visualeditor-enable-experimental'] = 1;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;//在除了主名字空间以外的名字空间中也启用可视化编辑器(下面的例子是用户名字空间)&lt;/span&gt;
&lt;span class="code-line"&gt;$wgVisualEditorNamespaces=array_merge($wgContentNamespaces,array( NS_USER ));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整的设置选项可以在扩展页面上找到.&lt;/p&gt;
&lt;p&gt;然后在汝的wiki上试试看呗~&lt;/p&gt;
&lt;img alt="VisualEditor效果" class="img-responsive" src="/images/visualeditor-test.png"/&gt;
&lt;/div&gt;
</summary><category term="mediawiki"></category><category term="notes"></category></entry><entry><title>新的"约伊兹的萌狼乡手札"诞生啦~</title><link href="https://blog.yoitsu.moe/tech/new_yoitsu_birth.html" rel="alternate"></link><updated>2016-01-16T09:35:00+08:00</updated><author><name>ホロ</name></author><id>tag:blog.yoitsu.moe,2016-01-16:tech/new_yoitsu_birth.html</id><summary type="html">
&lt;p&gt;就像标题描述的一样，新的"约伊兹的萌狼乡手札"以Pelican之姿再次出发啦~&lt;/p&gt;

&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;为啥要重做？&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;原来的 &lt;a class="reference external" href="https://wiki.yoitsu.moe/"&gt;约伊兹的萌狼乡手札&lt;/a&gt; 是基于MediaWiki搭建的,但是MediaWiki的本来用途并不是来做博客的呐~,不过咱还是一直拖着......直到 &lt;a class="reference external" href="https://www.archlinux.org/news/php-70-packages-released/"&gt;Arch Linux 宣布PHP7进入官方软件仓库&lt;/a&gt; ,咱升级以后两个关键的RSS扩展都坏掉啦~(应该都知道RSS对于博客型网站的重要性呗~),于是咱痛定思痛决定升级😂&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;为啥是Pelican?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;主要的原因是 &lt;del&gt;人生赢家&lt;/del&gt; &lt;a class="reference external" href="/links.html#farseerfc"&gt;farseerfc&lt;/a&gt; 用的也是Pelican，这样咱可以照着他的经历少走一些弯路......&lt;/p&gt;
&lt;p&gt;为啥不用Hexo,Ghost一类的博客系统呢?因为咱不太会设置Node.js(想当初给MediaWiki装可视化编辑器就折腾了半天)😂😂😂&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;那么有哪些问题咧?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先Pelican用的标记语言是rst(重组的文本)或是MarkDown,不过看情况Markdown是刚加入进来的,处理的还不够好,就先用rst呗~&lt;/p&gt;
&lt;p&gt;然而咱并不会rst的语法......只好找来个 &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html"&gt;语法指南&lt;/a&gt; 先照着看......&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;关于旧站的打算?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;介于原来的网站也是咱折腾了一阵子才出来的,于是决定先留着.(这个新站的评论要靠它呐~)&lt;/p&gt;
&lt;p&gt;咱以后也会继续折腾MediaWiki,顺便在这记下来一些过程和经验呗~&lt;/p&gt;
&lt;p&gt;作为新博客的第一篇博文就说到这里,咱具体是怎么做的 &lt;del&gt;请听下回分解&lt;/del&gt; 😂😂😂&lt;/p&gt;
&lt;/div&gt;
</summary><category term="yoitsu"></category><category term="pelican"></category><category term="blog"></category></entry></feed>