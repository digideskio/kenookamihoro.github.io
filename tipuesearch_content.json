{"pages":[{"url":"https://blog.yoitsu.moe/zhao-bu-dao-wen-zhang.html","text":"咱找不到汝需要的页面呐~ 如果汝是点击页面中的链接来到这里的话，发个评论给咱让咱修复链接呗~ 如果汝是随意输入URL的话，或许想查看 存档 ？如果有啥想法的话，也可以和咱说呐~","tags":"pages","title":"找不到文章"},{"url":"https://blog.yoitsu.moe/links.html","text":"因为有伙伴们在，咱就不是孤独一人呐~ 下面的链接列表以结识的区域分类，排名不分先后。如果汝想和咱结交的话， 来这看看呗~ IRC 频道 #archlinux-cn farseerfc 正在日本就读的博士生一枚，Arch Linux TU（授信用户，维护官方软件仓库的一群人）一名，同时是个人生赢家😂 lilydjwg 依云 #archlinuxcn 社区管理者之一，美味或流浪的坚持用XMPP的百合仙子。 phoenixlzx 凤凰卷 #archlinuxcn 社区管理者之一，好吃的凤凰卷兼 #nyaacat MC喵窝 管理员之一。 LastAvengers 谷月轩 社区里人称LA，一个 自己写了内核 的最近又在学Python的像新手又像大神的人呐~ felixonmars 人称肥猫，Arch Linux中文社区网站的维护者之一+Arch Linux TU+刷包狂人（雾）+撑起了Arch Linux半壁江山的领袖（超大雾 御宅暴君 acgtyrant 身兼聽力殘疾，一直立身力行地一日三省，口風相當緊，中文審美嚴苛無比，計算機科學絕讚登堂中，批判性思維異常過人，完美無瑕之守序中立，偶尔飙中二腔，大愛 ACG 與 Arch Linux. LQYMGT #archlinux-cn 中的偶像，.sm 最多的人。 quininer U need tox （雾） ，小心Ta傲娇block汝呐~（大雾），写着一个JavaScript驱动的帅气博客。（没雾） Frantic1048 Chino Kafuu 智乃 香风 萌萌的智乃，自己很萌的同时喜欢一切萌物，前端技艺精湛，貌似正在构建新的博客框架…… IRC 频道 #aosc (Telegram群 \"安同开源社区\"，目前不开放~） 白铭骢 Jeff Bai AOSC创始人 兼特首 ,开源爱好者：打包狂人，翻译狂魔，FSF 会员. Azu | Nyan Skidmore College （准）学生，伪宅。折腾是生命的动力。千万别以为Ta是开发者或者什么别的技术人才，这是不正确的。 Mingye Wang / 王铭烨 一个野生逗比小学生、间歇性自由软件原教旨主义者，并且他忽悠了很多人，很多很多人。 （因为某些特殊原因在某QQ群被调教，并被备注为女装狂魔） Telegram群 MediaWiki 站长交流 冼睿通 Pumiao 逗比+滑稽一枚。（咱想不到该说啥了嘛~） 李坤严（夏日大三角） 工作于中国厦门，从事IT行业，做过运维、程序员（PHP+MySQL+SDK），下班除了生活，喜欢搞鼓VPS（Linux），还有开源软件，比如 MediaWiki，Etherpad，Seafile，以及一些小应用。 Ruqi Li MediaWiki站长交流Telegram群里第三个说话的人（第一个是咱，第二个是@Pumiao（滑稽）） 地点不明（准确的地点咱已经忘记了呐~） 编程随想的博客 一个不知道是谁的博客，只知道他（她）是个程序员（媛）。原来写了些编程相关的博文，后来也开始传授一些网络安全相关的技巧，偶尔也分享些电子书。 Xiaolan （蓝潇） 如同博主本人所说，没什么特别的主题，想到什么写什么.... FiveYellowMice 一位早就不该中二的中二少年，最近又开了一个脑洞，于是就开了这个博客。","tags":"pages","title":"友情链接"},{"url":"https://blog.yoitsu.moe/addlinks.html","text":"首先咱问友情链接有啥用处的时候，一般都会得到这样的回答： 听说这样可以提升网站的 PageRank|PageRank ，在搜索结果中靠前——专业的讲，就是 SEO 。 — FiveYellowMice's Blog 友情链接的坏处是啥咧~ 那就是会让网页看起来比较乱，具体的例子咱就不举例了。另外页面下一排链接看着也不好看是呗~ 关键的原因是，咱比较懒嘛~ 那这个页面是来干啥的呢？ 因为既然交换了友情链接嘛，他（她/它）们就要把咱的地址放在网站上，访问那些网站的人们或许会来看咱呐~ 同样也可以让别人的博客通过咱这里的友情链接被发现。友情链接就这样被用来传递友情，而非 PageRank 。 交换友情链接的最低要求 下列类型的网站会直接拒绝的呐~ 教唆犯罪（可不是某国的口袋罪哟~）：例如关于帮助非法药品使用、盗窃、网络入侵、创建恶意代码、禁止的软件拷贝、禁止使用的版权/专利材料、破解软件(warez)，以及提供这些内容的种子(torrent)或链接的网站。 单纯的采集（说的难听些就是抄袭）站。 含有国内广告联盟的广告 R-18向（咱就不举例子了……） 只有满足下面的全部要求，咱才会和汝交换友链呐~ 汝本人热爱自由。 网站中大部分的元素能被现代浏览器（Firefox，Chrome，Microsoft Edge一类的）正常显示。 （仅限博客型网站）有及时更新的RSS 广告不要太多…… 加分项 大部分页面支持[[w:HTTPS|HTTPS]]访问（能有[[w:HSTS|HSTS]]更好） 汝的内容以像'''知识共享 署名-相同方式共享'''一类的自由文化协议授权。 活跃于开源社区 喜欢折腾新鲜技术，但至少对一种技术有恒心和毅力 写过开源的程序，或对其他开源项目贡献过代码/文档 比较萌 （ 这才是正义呐！） 但是如果遇到下面的情况，可以全部忽略 咱主动找到汝换友链…… ……未完待续（蛤？） 话说了那么多，如果想和咱交换友链的话…… 那还等啥，还不赶紧在下面发个评论或者去Github提个Issue~","tags":"pages","title":"交换友情链接"},{"url":"https://blog.yoitsu.moe/tox_trainee_guide.html","text":"Tox,一种新型的聊天协议.如果汝关注安全和隐私,不妨来看看呗~ 再说一遍Tox是啥? Tox是一种新型的通讯协议,它的目标是——提供一个无法监控的 Skype 替代品——彻底的加密，没有后门，无需中间服务器。 由于Tox就是一个协议框架,不同的开发者开发了不同的软件呗~ Tox 官方维护的wiki上可以找到不同平台可用的客户端列表呐 在下面的例子中咱会先拿 qtox 来示范一下,汝可以从上面的列表中选择一个适合自己的客户端呗~ 首先按照上游的指南装好客户端呗~ 新建一个Tox个人资料 运行qtox,会弹出这样的窗口: 因为咱已经有一个Tox Profile所以是这样啦,汝直接按\"New Profile\"就好: 在Username那挑个用户名,Password那输入个密码呗~ 汝输入的密码非常重要! 1.挑一个好的密码,现在Tox的个人资料只有密码这一重保护手段呐~,如果不怀好意的骇客得到了汝的密码和profile,就可以冒充汝发送消息了诶. 2,记住汝的密码!虽然安全性很重要,但是一旦汝忘了密码,基本上就无法恢复了呗~ 确认完毕之后就会进入到qtox的主画面了呗~(旁边一圈是咱加上的注释,原谅咱不怎么会用GIMP......) 修改个人资料 点击头像的区域就可以修改自己的个人资料了呗~ 就像界面介绍的那样,Name和Status是公开的信息,所以仔细考虑一下选择一个合适的呗~ 不过问题来啦,木有好友咧? 添加好友 要添加好友的话,先让汝的好友把Ta的Tox ID用其他的手段让汝知道呗~ E1F1C7DEA73D8126A1DEE9EAE5B45E21FB17E75F2319B7823A346B8C427EB272C80A89B69B4E —Tox ID 是像这样的十六进制数呗~ 然后到添加好友的界面把Tox ID输入进去.必要的话,附上一段消息让Ta知道汝是谁呗~ 一开始时汝的好友列表只会显示对方的Tox ID呐,像这样: 当Ta同意汝的好友请求以后,汝的好友列表上就会显示Ta的Name和Status呗~ 然后像平常一样聊天呗~ 要想让其他人和汝成为好友的话,把汝自己的Tox ID告诉Ta,让Ta像这样添加汝为好友呗~ 发起群聊 Tox也是可以发起群聊的哟~首先创建一个(qtox里点击下方\"创建群聊\"按钮就可以了诶~) 汝也可以邀请好友加入群聊呗~(qtox中右键点击某个好友-邀请加入群聊-汝的群聊名称呗~) 只不过万一汝退出了tox,下次登录时是不会加入上次加入的群聊的,汝只好让好友再邀请汝一次呗~ 导出Tox的配置文件 必要时可以导出汝的配置文件,这样就可以在其他地方连接到汝的Tox用户了呗~ qtox的话,可以在Profiles页面通过\"导出\"选项导出汝的配置文件呗~ 最后 这些就是tox基本的用法啦~,对于其他的客户端的话,不妨去阅读对应的文档呗~ 如果汝有意帮助开发Tox的话, 来这看看呗~ 哦,差点忘记啦,这是咱的Tox ID,大家可以试试看呗~ 7BC803F7F9B8A7230EE181AB45CA909DE446D36A7BC3A275D5576439E0CF7546FF4E2C4665CC","tags":"Tech","title":"Tox新手入门"},{"url":"https://blog.yoitsu.moe/new_yoitsu_birth_notes.html","text":"说好的下一期来啦~,新的\"约伊兹的萌狼乡手札\"是怎么样诞生呐~马上就告诉汝呗~ 安装Pelican然后进行初始设置 在咱写这篇文章时, farsserfc 已经把Pelican打好包放进Arch Linux 官方软件仓库啦好棒~ Arch Linux用户可以这样安装: sudo pacman -S pelican 其它操作系统可以通过pip安装: sudo pip install pelican 接着运行设置程序建立一个工作文件夹: pelican-quickstart 接着开始挖坑呗~,用 reStructuredText 或 Markdown 开始写文章然后放到 contents 文件夹里,像这样: (reStructuredText) 这里是标题 =========================================== :lang: 这里填语言 :date: 写文章的日期 :Category: 分类 这里是内容 (Markdown) Title: 这里是标题 date: 写文章的日期 Category: 分类 这里是内容 然后运行一个命令来测试 make html # 生成html make serve # 在127.0.0.1:8000 运行一个测试服务器. 然后打开浏览器输入 localhost:8000 ，你就能看到一个初生的很 简洁 ( 难看 ) 的博客了，不过不要担心，它是只丑小鸭，很快就会像天鹅般美丽(真的么?)。 修改 ( 调教 ) Pelican的主题 可能是一时抽风没找到合适的Material Design风格的框架， 于是走上了Metro UI CSS的不归路...... Metro UI CSS的项目主页在这里 http://metroui.org.ua 咱拿了pelican内置的simple主题做起步,把Metro UI CSS文件夹里的 /css 和 /js 复制到主题的 /statics 文件夹里. 现在的文件夹结构大概像这样: . ├── cache 生成頁面的 pickle 緩存 ├── content 讀取的全部內容 │ ├── <categories> 按分類存放的文章 │ ├── pages 像 About 這樣的固定頁面 │ └── static 文章內用到的靜態內容 ├── drafts 文章的草稿箱 ├── Makefile 生成用的 makefile ├── pelicanconf.py 測試時用的快速 Pelican 配置 ├── publishconf.py 部署時用的耗時 Pelican 配置 ├── output -> ../kenookamihoro.github.io ├── plugins -> ../plugins └── theme -> ../yoitsu 然后这个内容 repo 中的三个符号链接分别指向三个子 repo（为啥没用 git submodule ? 因为咱技术不精还不会用......）。 theme 指向 yoitsu ，是咱修改过的 pelican 主题啦。 plugins 指向 pelican-plugins 最后 output 指向 kenookamihoro.github.io 也就是发布的静态网站啦。 而主题文件夹的结构大概像这样： . ├── static 主题中用到的静态文件，例如js和css ├── templates 供jinja使用的模板页面 │ ├── archives.html 文章归档 │ ├── article.html 每个文章 │ ├── author.html 作者 │ ├── base.html 所有模板的基础 │ ├── category.html 分类 │ ├── index.html 首页 │ ├── page.html 每个页面 │ ├── pageination.html 分页 │ ├── search.html 搜索 │ └── tag.html 标签 └── 然后记得修改pelican.conf告诉Pelican那些页面是模板那些页面是直接生成的呐~ # DIRECT_TEMPLATES 告诉Pelican哪些页面是直接用来生成特定页面的...... DIRECT_TEMPLATES = (( 'index' , 'archives' , 'search' )) 接下来开始调教主题呗~,直接给出官方的教程呗~ Pelican doc:Creating Themes 经过一番 仔细 ( 无脑 ) 调教以后,就成了汝等现在看到的样子了呐~ PS:咱自己做的这套主题还木有到能拿来复用的程度(原因主要是咱有很多是直接写死在主题里的设置),所以这又是一个坑呗~ 装插件 作为一套博客系统,Pelican自然有很多的插件可以安装呐~,不信的话去看看`pelican-plugins里有多少插件呗~ < https://github.com/getpelican/pelican-plugins >`_ 咱启用的插件有这些: PLUGINS = [ \"better_codeblock_line_numbering\" , 'tipue_search' , 'neighbors' , 'series' , \"render_math\" , 'extract_toc' , 'tag_cloud' , 'sitemap' , 'summary' , 'bootstrapify' , 'twitter_bootstrap_rst_directives' ] 具体的设置流程嘛,请允许咱引用一下 farseerfc.me:重新設計了 Pelican 的主題與插件 呗~ 实现动态格言 动态格言的实现来自 fiveyellowmice 啦~(咱不是JavaScript专家呐~,就不谈具体的实现了呗~) 首先是一段修改某一个元素的类的JavaScript(当然还需要 velocity ): < script src = \"/theme/js/velocity.min.js\" ></ script > < script > document . addEventListener ( \"DOMContentLoaded\" , function () { $ ( \".menu-button\" ). on ( \"touchstart\" , function () { $ ( \".menu-wrapper\" ). removeClass ( \"trigger\" ); if ( $ ( \".nav-items\" ). is ( \":visible\" ) ) { $ ( \".nav-items\" ). velocity ( \"finish\" ) . velocity ( \"slideUp\" , { delay : 200 , duration : 400 , easing : \"easeInQuad\" }) . velocity ( \"fadeOut\" , { delay : 200 , duration : 400 , easing : \"easeInQuad\" , queue : false }); } else { $ ( \".nav-items\" ). velocity ( \"finish\" ) . velocity ( \"slideDown\" , { delay : 200 , duration : 400 , easing : \"easeOutQuad\" }) . velocity ( \"fadeIn\" , { delay : 200 , duration : 400 , easing : \"easeOutQuad\" , queue : false }); } }); }); </ script > 然后新建一个 Github gist 填上动态格言,像这样(大括号里的内容可以添加多个): [ { \"content\" : \"example\" , \"author\" : \"someone\" }, ] 再写个JavaScript来从JSON中提取格言然后填到html里: < script > document . addEventListener ( \"DOMContentLoaded\" , function () { $ ( \".site-description\" ). after ( $ ( \"<blockquote>\" ). attr ( \"id\" , \"fortune\" ). css ( \"display\" , \"none\" )); $ ( \".site-description\" ). after ( $ ( \"<blockquote>\" ). attr ( \"id\" , \"fortune\" ). css ( \"line-height\" , \"1.4rem\" )); $ . getJSON ( \"https://api.github.com/gists/07ca2edea6e507bf40f5\" , function ( data ) { fortunes = JSON . parse ( data . files [ \"quotes.json\" ]. content ); randomFortune = fortunes [ Math . floor ( Math . random () * fortunes . length ) ]; if ( randomFortune . author === undefined ) { $ ( \"#fortune\" ). html ( \"<p>\" + randomFortune . content + \"</p>\" ); } else { $ ( \"#fortune\" ). html ( \"<p>\" + randomFortune . content + \"</p>\" + \"<small>\" + randomFortune . author + \"</small>\" ); } $ ( \"#fortune\" ). velocity ( \"slideDown\" , { duration : 400 , easing : \"easeOutQuad\" }); }); }); </ script > 最后的效果汝也应该看到了呗~ 发布 通过几条命令可以发布~ make publish 然后用git提交到Github就好...... 好吧这就是咱的全过程啦(雾)","tags":"Tech","title":"新约伊兹的萌狼乡手札诞生全过程伪实录"},{"url":"https://blog.yoitsu.moe/visualeditor_for_mediawiki.html","text":"为MediaWiki安装来自 维基媒体基金会 的 可视化编辑器 . 连维基百科都要Hold不住啦~ 许多新用户不会着手大幅度修改，而只是做些细节调整，不过仅仅阅读源代码就必须学标记语言了。当我们的用户在演示操作时，这把他们吓走了。 早在 2004 年，社群开始一再认识到必须采用更好的编辑方式。因为人们的请求，更重要的是他们的需要，所以我们开发了可视化编辑器。 Wiki 标记语言让新人害怕，这种程度会随着其他站点的迁离而加剧。如果我们不开发可视化编辑器，那么图表的走势会在接下来五年中变得更加糟糕。 — MediaWiki.org 所以他们才 痛定思痛 决定开发可视化编辑器么😂 开始之前-检查一下要求 可视化编辑器(下面就说VisualEditor呗~)还需要一个叫 Parsoid 的程序来承担把wiki标记转化成html的任务啦(看下图)~,所以需要服务器来运行它呐~ 安装Parsoid(Ubuntu 14+ / Debian 7+ ) 上游的指南在这(好好学英语呗~) https://www.mediawiki.org/wiki/Parsoid/Setup Ubuntu和Debian系统的话直接添加MediaWiki.org的软件源然后通过apt安装就好了啦~ 首先添加MediaWiki.org的GPG公钥: sudo apt-key advanced --keyserver keys.gnupg.net --recv-keys 664C383A3566A3481B942F007A322AC6E84AFDD2 然后添加Parsoid源: sudo echo \"deb https://releases.wikimedia.org/debian jessie-mediawiki main\" > /etc/apt/sources.list.d/parsoid.list 安装需要的软件包: sudo apt-get update && sudo apt-get install curl parsoid 然后看下下面一节的内容修改一下配置文件呗~ 其它系统?手动安装呗~ 上游的指南在这(还是要好好学英语呗~) https://www.mediawiki.org/wiki/Parsoid/Developer_Setup 首先汝要装上Nodejs(>0.8,建议0.10或更新的版本呐~),还有git. 具体的安装方法为了避免降低正交性 (其实是系统太多不好写......) ,就麻烦汝自己去找了呐~ 「呵。咱是贤狼，不是神呐。如果汝开始会期待起咱能够泄露天机给汝，那咱就得从汝眼前消失了呗。」 node --version # 如果是Debian或Ubuntu ,输入 nodejs --version 然后用git克隆版本库呗~ git clone https://gerrit.wikimedia.org/r/p/mediawiki/services/parsoid 用npm安装上相应的依赖: npm install 然后看下面一节的内容修改一下配置文件呗~ 修改配置文件 如果是通过软件源安装的,配置文件位于 /etc/mediawiki/parsoid/settings.js 如果是通过git下载的,从parsoid目录中先复制一份样例出来呗~ cp localsettings.js.example localsettings.js 打开配置文件,找到这一段内容,然后改它~: parsoidConfig . setMwApi ({ // The \"prefix\" is the name given to this wiki configuration in the // (deprecated) Parsoid v1 API. prefix : 'localhost' , // optional // The \"domain\" is used for communication with Visual Editor // and RESTBase. It defaults to the hostname portion of // the `uri` property below, but you can manually set it // to an arbitrary string. domain : 'localhost' , // optional // This is the only required parameter: // the URL of you MediaWiki API endpoint. uri : 'http://localhost/w/api.php' }); 其中\"uri\"对应汝的wiki的api.php的位置,\"domain\"是汝的域名啦~.\"prefix\"可以自己起一个(反正因为换了API也没用啦~,不过测试时可能用得到) 启动服务 从软件源安装的? sudo systemctl start parsoid # Debian Jessie ,用Systemd启动 sudo service parsoid start # Debian Wheezy 或Ubuntu ,用init.d脚本启动. 如果汝不是通过远程访问执行的命令,可以在浏览器上打开 http://localhost:8142 来进行测试.试着加载 http://localhost:8142/汝设置的前缀/汝的wiki上的一个页面 试试呗~ 用git安装的? npm start 或者: node bin/server.js 可以用screen一类的工具让Parsoid在后台运行~ 如果汝不是通过远程访问执行的命令,可以在浏览器上打开 http://localhost:8000 来进行测试.试着加载 http://localhost:8000/汝设置的前缀/汝的wiki上的一个页面 试试呗~ 修改监听地址便于远程测试 改这一段: // Allow override of port/interface: //parsoidConfig.serverPort = 8142; //parsoidConfig.serverInterface = '127.0.0.1'; 反注释最后一行并改成0.0.0.0,就可以通过 http://服务器的IP地址:8142 访问啦~ 安装VisualEditor扩展 上游的指南在这: https://www.mediawiki.org/wiki/Extension:VisualEditor 首先从 这里 获得扩展然后上传到汝的wiki上的extensions目录呗~ 然后修改汝的LocalSettings.php: require_once \"$IP/extensions/VisualEditor/VisualEditor.php\"; // 反注释下一行来默认启用可视化编辑器 #$wgDefaultUserOptions['visualeditor-enable'] = 1; // 反注释下一行来启用测试中的功能 #$wgDefaultUserOptions['visualeditor-enable-experimental'] = 1; //在除了主名字空间以外的名字空间中也启用可视化编辑器(下面的例子是用户名字空间) $wgVisualEditorNamespaces=array_merge($wgContentNamespaces,array( NS_USER )); 完整的设置选项可以在扩展页面上找到. 然后在汝的wiki上试试看呗~","tags":"Tech","title":"为MediaWiki安装可视化编辑器"},{"url":"https://blog.yoitsu.moe/new_yoitsu_birth.html","text":"就像标题描述的一样，新的\"约伊兹的萌狼乡手札\"以Pelican之姿再次出发啦~ 为啥要重做？ 原来的 约伊兹的萌狼乡手札 是基于MediaWiki搭建的,但是MediaWiki的本来用途并不是来做博客的呐~,不过咱还是一直拖着......直到 Arch Linux 宣布PHP7进入官方软件仓库 ,咱升级以后两个关键的RSS扩展都坏掉啦~(应该都知道RSS对于博客型网站的重要性呗~),于是咱痛定思痛决定升级😂 为啥是Pelican? 主要的原因是 人生赢家 farseerfc 用的也是Pelican，这样咱可以照着他的经历少走一些弯路...... 为啥不用Hexo,Ghost一类的博客系统呢?因为咱不太会设置Node.js(想当初给MediaWiki装可视化编辑器就折腾了半天)😂😂😂 那么有哪些问题咧? 首先Pelican用的标记语言是rst(重组的文本)或是MarkDown,不过看情况Markdown是刚加入进来的,处理的还不够好,就先用rst呗~ 然而咱并不会rst的语法......只好找来个 语法指南 先照着看...... 关于旧站的打算? 介于原来的网站也是咱折腾了一阵子才出来的,于是决定先留着.(这个新站的评论要靠它呐~) 咱以后也会继续折腾MediaWiki,顺便在这记下来一些过程和经验呗~ 作为新博客的第一篇博文就说到这里,咱具体是怎么做的 请听下回分解 😂😂😂","tags":"Tech","title":"新的\"约伊兹的萌狼乡手札\"诞生啦~"}]}