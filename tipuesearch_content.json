{"pages":[{"text":"友情链接 填坑中……","url":"/links.html","title":"Links","tags":"pages"},{"text":"This plugin adds next_article (newer) and prev_article (older) variables to the article's context. Also adds next_article_in_category and prev_article_in_category . Usage <ul> {% if article.prev_article %} <li> <a href= \" {{ SITEURL }} / {{ article.prev_article.url }} \" > {{ article.prev_article.title }} </a> </li> {% endif %} {% if article.next_article %} <li> <a href= \" {{ SITEURL }} / {{ article.next_article.url }} \" > {{ article.next_article.title }} </a> </li> {% endif %} </ul> <ul> {% if article.prev_article_in_category %} <li> <a href= \" {{ SITEURL }} / {{ article.prev_article_in_category.url }} \" > {{ article.prev_article_in_category.title }} </a> </li> {% endif %} {% if article.next_article_in_category %} <li> <a href= \" {{ SITEURL }} / {{ article.next_article_in_category.url }} \" > {{ article.next_article_in_category.title }} </a> </li> {% endif %} </ul> Usage with the Subcategory plugin If you want to get the neigbors within a subcategory it's a little different. Since an article can belong to more than one subcategory, subcategories are stored in a list. If you have an article with subcategories like Category/Foo/Bar it will belong to both subcategory Foo, and Foo/Bar. Subcategory neighbors are added to an article as next_article_in_subcategory# and prev_article_in_subcategory# where # is the level of subcategory. So using the example from above, subcategory1 will be Foo, and subcategory2 Foo/Bar. Therefor the usage with subcategories is: <ul> {% if article.prev_article_in_subcategory1 %} <li> <a href= \" {{ SITEURL }} / {{ article.prev_article_in_subcategory1.url }} \" > {{ article.prev_article_in_subcategory1.title }} </a> </li> {% endif %} {% if article.next_article_in_subcategory1 %} <li> <a href= \" {{ SITEURL }} / {{ article.next_article_in_subcategory1.url }} \" > {{ article.next_article_in_subcategory1.title }} </a> </li> {% endif %} </ul> <ul> {% if article.prev_article_in_subcategory2 %} <li> <a href= \" {{ SITEURL }} / {{ article.prev_article_in_subcategory2.url }} \" > {{ article.prev_article_in_subcategory2.title }} </a> </li> {% endif %} {% if article.next_article_in_subcategory2 %} <li> <a href= \" {{ SITEURL }} / {{ article.next_article_in_subcategory2.url }} \" > {{ article.next_article_in_subcategory2.title }} </a> </li> {% endif %} </ul>","url":"/neighbor-articles-plugin-for-pelican.html","title":"Neighbor Articles Plugin for Pelican","tags":"Plugins"},{"text":"Reading through all the documentation is highly recommended, but for the truly impatient, following are some quick steps to get started. Installation Install Pelican (and optionally Markdown if you intend to use it) on Python 2.7.x or Python 3.3+ by running the following command in your preferred terminal, prefixing with sudo if permissions warrant: pip install pelican markdown Create a project First, choose a name for your project, create an appropriately-named directory for your site, and switch to that directory: mkdir -p ~/projects/yoursite cd ~/projects/yoursite Create a skeleton project via the pelican-quickstart command, which begins by asking some questions about your site: pelican-quickstart For questions that have default values denoted in brackets, feel free to use the Return key to accept those default values. When asked for your URL prefix, enter your domain name as indicated (e.g., http://example.com ). Create an article You cannot run Pelican until you have created some content. Use your preferred text editor to create your first article with the following content: Title: My First Review Date: 2010-12-03 10:20 Category: Review Following is a review of my favorite mechanical keyboard. Given that this example article is in Markdown format, save it as ~/projects/yoursite/content/keyboard-review.md . Generate your site From your site directory, run the pelican command to generate your site: pelican content Your site has now been generated inside the output directory. (You may see a warning related to feeds, but that is normal when developing locally and can be ignored for now.) Preview your site Open a new terminal session and run the following commands to switch to your output directory and launch Pelican's web server: cd ~/projects/yoursite/output python -m pelican.server Preview your site by navigating to http://localhost:8000/ in your browser. Continue reading the other documentation sections for more detail, and check out the Pelican wiki's Tutorials page for links to community-published tutorials. publish : rmdrafts cc clean theme [ ! -d $( OUTPUTDIR ) ] || find $( OUTPUTDIR ) -mindepth 1 -not -wholename \"*/.git*\" -delete rm -rf cache echo $( SITEURL ) > content/static/CNAME $( PELICAN ) $( INPUTDIR ) -o $( OUTPUTDIR ) -s $( PUBLISHCONF ) $( PELICANOPTS ) $( MAKE ) rsthtml github : ( cd $( OUTPUTDIR ) && git checkout master ) env SITEURL = \"farseerfc.me\" $( MAKE ) publish ( cd $( OUTPUTDIR ) && git add . && git commit -m \"update\" && git push )","url":"/pelican-quickstart.html","title":"Pelican QuickStart","tags":"Examples"},{"text":"This plugin allows easy, variable length summaries directly embedded into the body of your articles. It introduces two new settings: SUMMARY_BEGIN_MARKER and SUMMARY_END_MARKER : strings which can be placed directly into an article to mark the beginning and end of a summary. When found, the standard SUMMARY_MAX_LENGTH setting will be ignored. The markers themselves will also be removed from your articles before they are published. The default values are <!-- PELICAN_BEGIN_SUMMARY --> and <!-- PELICAN_END_SUMMARY --> . For example: Title: My super title Date: 2010-12-03 10:20 Tags: thats, awesome Category: yeah Slug: my-super-post Author: Alexis Metaireau This is the content of my super blog post. <!-- PELICAN_END_SUMMARY --> and this content occurs after the summary. Here, the summary is taken to be the first line of the post. Because no beginning marker was found, it starts at the top of the body. It is possible to leave out the end marker instead, in which case the summary will start at the beginning marker and continue to the end of the body. The plugin also sets a has_summary attribute on every article. It is True for articles with an explicitly-defined summary, and False otherwise. (It is also False for an article truncated by SUMMARY_MAX_LENGTH .) Your templates can use this e.g. to add a link to the full text at the end of the summary. reST example Inserting the markers into a reStructuredText document makes use of the comment directive, because raw HTML is automatically escaped. The reST equivalent of the above Markdown example looks like this: My super title ############## :date: 2010-12-03 10:20 :tags: thats, awesome :category: yeah :slug: my-super-post :author: Alexis Metaireau This is the content of my super blog post. .. PELICAN_END_SUMMARY and this content occurs after the summary.","url":"/summary.html","title":"Summary","tags":"Plugins"},{"text":"This plugin generates a tag-cloud. Installation In order to use to use this plugin, you have to edit(*) or create(+) the following files: blog/ ├── pelicanconf.py * ├── content ├── plugins + │ └── tag_cloud.py + └── themes └── mytheme ├── templates │ └── base.html * └── static └── css └── style.css * In pelicanconf.py you have to activate the plugin: PLUGIN_PATHS = [\"plugins\"] PLUGINS = [\"tag_cloud\"] Into your plugins folder, you should add tag_cloud.py (from this repository). In your theme files, you should change base.html to apply formats (and sizes) defined in style.css , as specified in \"Settings\", below. Settings Setting name (followed by default value) What does it do? TAG_CLOUD_STEPS = 4 Count of different font sizes in the tag cloud. TAG_CLOUD_MAX_ITEMS = 100 Maximum number of tags in the cloud. TAG_CLOUD_SORTING = 'random' The tag cloud ordering scheme. Valid values: random, alphabetically, alphabetically-rev, size and size-rev TAG_CLOUD_BADGE = True Optionnal setting : can bring badges , which mean say : display the number of each tags present on all articles. The default theme does not include a tag cloud, but it is pretty easy to add one: <ul class=\"tagcloud\"> {% for tag in tag_cloud %} <li class=\"tag-{{ tag.1 }}\"> <a href=\"{{ SITEURL }}/{{ tag.0.url }}\"> {{ tag.0 }} {% if TAG_CLOUD_BADGE %} <span class=\"badge\">{{ tag.2 }}</span> {% endif %} </a> </li> {% endfor %} </ul> You should then also define CSS styles with appropriate classes (tag-1 to tag-N, where N matches TAG_CLOUD_STEPS ), tag-1 being the most frequent, and define a ul.tagcloud class with appropriate list-style to create the cloud. You should copy/paste this badge CSS rule ul.tagcloud .list-group-item <span>.badge if you're using TAG_CLOUD_BADGE setting. (this rule, potentially long , is suggested to avoid conflicts with CSS libs as twitter Bootstrap) For example: ul.tagcloud { list-style: none; padding: 0; } ul.tagcloud li { display: inline-block; } li.tag-1 { font-size: 150%; } li.tag-2 { font-size: 120%; } ... ul.tagcloud .list-group-item <span>.badge { background-color: grey; color: white; } By default the tags in the cloud are sorted randomly, but if you prefers to have it alphabetically use the alphabetically (ascending) and alphabetically-rev (descending). Also is possible to sort the tags by it's size (number of articles with this specific tag) using the values size (ascending) and size-rev (descending).","url":"/tag_cloud.html","title":"tag_cloud","tags":"Plugins"}]}